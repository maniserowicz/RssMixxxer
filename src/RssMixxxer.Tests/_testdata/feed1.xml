<?xml version="1.0" encoding="utf-8"?><rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Maciej Aniserowicz</title><link>http://www.maciejaniserowicz.com/</link><description /><language>pl-PL</language><generator>BlogEngine.NET 1.6.0.0</generator><a10:link rel="self" type="application/rss+xml" href="http://feeds.feedburner.com/maciejaniserowicz" /><a10:link rel="hub" href="http://pubsubhubbub.appspot.com/" /><docs>http://www.rssboard.org/rss-specification</docs><blogChannel:blogRoll xmlns:blogChannel="http://backend.userland.com/blogChannelModule">http://www.maciejaniserowicz.com/opml.axd</blogChannel:blogRoll><blogChannel:blink xmlns:blogChannel="http://backend.userland.com/blogChannelModule">http://www.dotnetblogengine.net/syndication.axd</blogChannel:blink><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Aniserowicz</dc:creator><dc:title xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Aniserowicz</dc:title><geo:lat xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#">0.000000</geo:lat><geo:long xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#">0.000000</geo:long><feedburner:info uri="maciejaniserowicz" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"></feedburner:info><item><guid isPermaLink="false">http://www.maciejaniserowicz.com/post.aspx?id=c7403132-e00b-4ca6-9080-90af242cd311</guid><link>http://feedproxy.google.com/~r/maciejaniserowicz/~3/QCPIyHd-Wuo/post.aspx</link><author>procent</author><category>pro</category><title>Słowo na niedzielę, o błędach i nauczkach</title><description>&lt;p&gt;Błądzić jest rzeczą ludzką. Błędów się nie uniknie, ważne aby wyciągać z nich wnioski i starać się unikać popełniania tych samych złych kroków w przyszłości. To się nazywa “doświadczenie”. A my, aktywni uczestnicy “projektów informatycznych”, mamy ku temu nader wiele okazji.&lt;/p&gt;  &lt;p&gt;Jak twierdzi autor doskonałej książki, którą w ten weekend bezlitośnie pochłaniam:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;A typical software project can present more opportunities to learn from mistakes than some people get in a lifetime&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Źródło: &lt;a href="http://www.stevemcconnell.com/rd.htm"&gt;Steve McConnell “Rapid Development”&lt;/a&gt;&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=QCPIyHd-Wuo:QNhy3rOIm04:QDrqXnVDFOM"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=QDrqXnVDFOM" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=QCPIyHd-Wuo:QNhy3rOIm04:lt7SxnsiOIA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=lt7SxnsiOIA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=QCPIyHd-Wuo:QNhy3rOIm04:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=QCPIyHd-Wuo:QNhy3rOIm04:0VBWazUhMmc"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=0VBWazUhMmc" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=QCPIyHd-Wuo:QNhy3rOIm04:D7DqB2pKExk"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?i=QCPIyHd-Wuo:QNhy3rOIm04:D7DqB2pKExk" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/maciejaniserowicz/~4/QCPIyHd-Wuo" height="1" width="1"/&gt;</description><pubDate>Sun, 19 Feb 2012 12:28:40 +0100</pubDate><comments>http://www.maciejaniserowicz.com/post/2012/02/19/Sc582owo-na-niedziele-o-bc582edach-i-nauczkach.aspx#comment</comments><dc:publisher xmlns:dc="http://purl.org/dc/elements/1.1/">procent</dc:publisher><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/pingback.axd</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/post.aspx?id=c7403132-e00b-4ca6-9080-90af242cd311</pingback:target><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.maciejaniserowicz.com/trackback.axd?id=c7403132-e00b-4ca6-9080-90af242cd311</trackback:ping><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/post/2012/02/19/Sc582owo-na-niedziele-o-bc582edach-i-nauczkach.aspx#comment</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/syndication.axd?post=c7403132-e00b-4ca6-9080-90af242cd311</wfw:commentRss><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.maciejaniserowicz.com/post.aspx?id=c7403132-e00b-4ca6-9080-90af242cd311</feedburner:origLink></item><item><guid isPermaLink="false">http://www.maciejaniserowicz.com/post.aspx?id=804f4a90-9417-4db8-8144-6dfee949ea22</guid><link>http://feedproxy.google.com/~r/maciejaniserowicz/~3/Q5ljbXvMve4/post.aspx</link><author>procent</author><category>pro</category><title>Notatki z "internal git training"</title><description>&lt;p&gt;Kilka dni temu miałem przyjemność poprowadzić w firmie wewnętrzne szkolenie/wstęp do Gita.&lt;/p&gt;  &lt;p&gt;BTW, za swój osobisty sukces uważam fakt, że już po pierwszym miesiącu pracy dostałem szansę &amp;quot;oficjalnego&amp;quot; zaprezentowania zajebistości Gita programistom chłostanym dotychczas bezlitośnie przez TFSową kontrolę wersji witkami z doczepionymi haczykami na ryby po osolonych plecach. Efekt był dość prosty do przewidzenia: podobało się.&lt;/p&gt;  &lt;p&gt;Poniżej wrzucam swoją listę tematów do poruszenia. Moim zdaniem są to najważniejsze elementy do pokazania w sensownym czasie nieprzekraczającym połowy dnia pracy, gdzie zostaje jeszcze sporo luzu na eksperymentowanie i demonstrowanie na żywo pewnych najczęściej spotykanych scenariuszy. Może ta lista posłuży komuś do wyjścia w swojej firmie z podobną inicjatywą, czyli zaprezentowania Gita szerszemu gronu? Gitersi wszystkich firm, łączmy się;).&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Co to jest Git i dlaczego jest lepszy niż TFS:&lt;/strong&gt;&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;rozproszony system kontroli wersji &lt;/li&gt;    &lt;li&gt;każdy ma swoje pełne repozytorium &lt;/li&gt;    &lt;li&gt;diff/log/... - wszystko lokalnie &lt;/li&gt;    &lt;li&gt;commity - też lokalnie &lt;/li&gt;    &lt;li&gt;komunikacja z centralnym serwerem (jedna z możliwości podzielenia się kodem z zespołem)      &lt;ul&gt;       &lt;li&gt;pull - pobranie najnowszego kodu &lt;/li&gt;        &lt;li&gt;push - wysłanie własnych commitów &lt;/li&gt;        &lt;li&gt;&amp;quot;remotes&amp;quot; - linki do zdalnych repozytorium &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;gałęzie      &lt;ul&gt;       &lt;li&gt;gałąź &amp;quot;główna&amp;quot; - master &lt;/li&gt;        &lt;li&gt;lokalne gałęzie - całkowita swoboda w poruszaniu się i organizacji pracy &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;żadnych exclusive locks &lt;/li&gt;    &lt;li&gt;świetny merge &lt;/li&gt;    &lt;li&gt;śledzi zawartość plików, a nie pliki      &lt;ul&gt;       &lt;li&gt;stąd automatyczne wykrywa np. rename &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;[blog] &lt;a href="http://www.maciejaniserowicz.com/post/2010/02/09/Git-rozproszony-system-kontroli-wersji-(DVCS).aspx"&gt;Git - rozproszony system kontroli wersji (DVCS)&lt;/a&gt; - krótkie omówienie i garść linków &lt;/li&gt;    &lt;li&gt;[blog] &lt;a href="http://www.maciejaniserowicz.com/post/2012/01/18/W-czym-Git-jest-lepszy-od-TFS.aspx"&gt;W czym Git jest lepszy od TFS?&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;&lt;strong&gt;Komendy do poruszania się po gicie:&lt;/strong&gt;&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;pull - ściąga kod z centralnego serwera i łączy z naszym &lt;/li&gt;    &lt;li&gt;push - wysyła nasz kod (lokalne commity) na centralny serwer &lt;/li&gt;    &lt;li&gt;checkout      &lt;ul&gt;       &lt;li&gt;po podaniu nazwy gałęzi: przełącza working copy między gałęziami &lt;/li&gt;        &lt;li&gt;z flagą '-b' - tworzy nową gałąź &lt;/li&gt;        &lt;li&gt;po podaniu nazwy pliku: ściąga plik z podanej wersji (bez podania wersji - ściąga z ostatniego commita -&amp;gt; usuwa &amp;quot;niezacommitowane&amp;quot; zmiany) &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;branch      &lt;ul&gt;       &lt;li&gt;listuje aktualne gałęzie &lt;/li&gt;        &lt;li&gt;z flagą '-d' - usuwa gałąź o podanej nazwie &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;help: git [command] --help &lt;/li&gt;    &lt;li&gt;[blog] &lt;a href="http://www.maciejaniserowicz.com/post/2010/02/10/Git-poczatek.aspx"&gt;Git - początek&lt;/a&gt; - pierwsze kroki po instalacji gita &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;&lt;strong&gt;Indeks (&amp;quot;staging area&amp;quot;): &lt;/strong&gt;&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;miejsce między working copy a commitem &lt;/li&gt;    &lt;li&gt;&amp;quot;cache&amp;quot; zmian, które znajdą się w następnym commicie &lt;/li&gt;    &lt;li&gt;pozwala na bardzo dokładną kontrolę nad tym co zostanie zacommitowane &lt;/li&gt;    &lt;li&gt;można dowolnie manipulować zawartością indeksu, np zapisując tam tylko część pliku do commita &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;&lt;strong&gt;Komendy do working copy, indeksu i commitów:&lt;/strong&gt;&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;add - dodanie zmian do indeksu      &lt;ul&gt;       &lt;li&gt;add -A - dodanie wszystkich zmian do indeksu &lt;/li&gt;        &lt;li&gt;add -i - interactive add, dokładna kontrola nad tym co zostanie dodane do indeksu &lt;/li&gt;        &lt;li&gt;add -i -&amp;gt; patch - dodawanie części zmian z danego pliku do indeksu &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;commit - stworzenie commita z aktualnego stanu indeksu      &lt;ul&gt;       &lt;li&gt;pierwsza linijka w commit msg - krótki opis, potem pusta linia, potem ew. dłuższy opis - tip dla narzędzi wyświetlających logi &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;clean - czyszczenie plików 'untracked' &lt;/li&gt;    &lt;li&gt;reset - czyszczenie indeksu      &lt;ul&gt;       &lt;li&gt;reset --hard - czyszczenie indeksu i working copy, coś jak &amp;quot;undo pending changes&amp;quot; &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;stash - zachowanie aktualnych zmian na później, poza indeksem i poza commitami (coś jak shelve, tylko lokalnie) &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;&lt;strong&gt;Struktura commitów&lt;/strong&gt;&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;lokalne commity - lista podzielona na gałęzie      &lt;ul&gt;       &lt;li&gt;każdy commit jednoznacznie identyfikowany SHA1 ID &lt;/li&gt;        &lt;li&gt;każdy commit można otagować &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;ostatni commit w gałęzi to HEAD &lt;/li&gt;    &lt;li&gt;merge tworzy &amp;quot;merge commit&amp;quot; będący dzieckiem dwóch commitów      &lt;ul&gt;       &lt;li&gt;można zrobić merge bez tego, ale nie ma sensu w to teraz wnikać &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;można dowolnie nawigować się pomiędzy commitami (znając jego ID, nazwę bądź położenie relatywne do innego znanego commita, np końcówki gałęzi)      &lt;ul&gt;       &lt;li&gt;git checkout master^ - 1 commit przed HEAD master &lt;/li&gt;        &lt;li&gt;git checkout master~4 - 4 commity przed HEAD master &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;&lt;strong&gt;Modyfikacja historii:&lt;/strong&gt;&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;commit --amend - modyfikacja ostatniego commita &lt;/li&gt;    &lt;li&gt;rebase - &amp;quot;nałożenie&amp;quot; jednej gałęzi na drugą gałąź &lt;/li&gt;    &lt;li&gt;rebase -i - interactive rebase      &lt;ul&gt;       &lt;li&gt;reword &lt;/li&gt;        &lt;li&gt;edit &lt;/li&gt;        &lt;li&gt;squash &lt;/li&gt;        &lt;li&gt;... &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;&lt;b&gt;NIE WOLNO&lt;/b&gt; modyfikować historii już wysłanej na serwer (!!!)       &lt;ul&gt;       &lt;li&gt;standardowo git nie pozwoli tego zrobić, jeśli wysyłamy do innego repo gita... &lt;/li&gt;        &lt;li&gt;... ale nie wiem jak zachowa się TFS &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;[blog] &lt;a href="http://www.maciejaniserowicz.com/post/2010/02/17/Modyfikacja-historii-w-Gicie.aspx"&gt;Modyfikacja historii w Gicie&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;&lt;strong&gt;Git-TFS: &lt;/strong&gt;&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;workflow:      &lt;ul&gt;       &lt;li&gt;[master] &lt;/li&gt;        &lt;li&gt;git tfs pull - mamy najnowszy kod z repo &lt;/li&gt;        &lt;li&gt;git checkout -b our-branch-name - tworzymy gałąź do bieżących prac &lt;/li&gt;        &lt;li&gt;git add/commit... - pracujemy &lt;/li&gt;        &lt;li&gt;         &lt;p&gt;git add/commit... - pracujemy&lt;/p&gt;          &lt;p&gt;git add/commit... - pracujemy&lt;/p&gt;       &lt;/li&gt;        &lt;li&gt;git checkout master - powracamy do gałęzi głównej &lt;/li&gt;        &lt;li&gt;git tfs pull - ściągamy najnowszy kod (w [master] zawsze mamy kod bez swoich modyfikacji) &lt;/li&gt;        &lt;li&gt;git checkout our-branch-name - wracamy na naszą gałąź &lt;/li&gt;        &lt;li&gt;git rebase master - &amp;quot;nakładamy&amp;quot; naszą gałąź na najnowszy kod z TFS (ew. radzimy sobie z merge - mi się tutaj jeszcze nie zdarzyło żebym musiał to robić) &lt;/li&gt;        &lt;li&gt;wysyłamy zmiany do TFS          &lt;ul&gt;           &lt;li&gt;git tfs rcheckin -w [task id] - wypychamy nowe commity z naszej gałęzi do TFSa mówiąc z jakim taskiem ma skojarzyć; commit messages zostaną umieszczone jako komentarz do checkina              &lt;ul&gt;               &lt;li&gt;działanie &amp;quot;pod spodem&amp;quot;: push jednego commita -&amp;gt; pull -&amp;gt; rebase -&amp;gt; ... &lt;/li&gt;                &lt;li&gt;może kilka chwil potrwać &lt;/li&gt;             &lt;/ul&gt;           &lt;/li&gt;            &lt;li&gt;git tfs checkintool --build-default-comment              &lt;ul&gt;               &lt;li&gt;łączy wszystkie commity w jeden &lt;/li&gt;             &lt;/ul&gt;           &lt;/li&gt;         &lt;/ul&gt;       &lt;/li&gt;        &lt;li&gt;git checkout master - powracamy do gałęzi głównej &lt;/li&gt;        &lt;li&gt;git tfs pull - ściągamy do [master]a nasze zmiany (plus ewentualnie inne które wydarzyły się w tym czasie) &lt;/li&gt;        &lt;li&gt;git branch -d our-branch-name - kasujemy naszą gałąź, nie jest już potrzebna (możemy skasować bo wszystkie zmiany z niej są w masterze, inaczej git by na to nie pozwolił) &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;[blog] &lt;a href="http://www.maciejaniserowicz.com/post/2012/01/23/git-tfs-lek-na-prawie-cac582e-zc582o.aspx"&gt;git-tfs - lek na prawie całe zło&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;&lt;strong&gt;Narzędzia:&lt;/strong&gt;&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;git bash (z aliasami gita lub autohotkeys)      &lt;ul&gt;       &lt;li&gt;demo użycia &lt;/li&gt;        &lt;li&gt;[blog] &lt;a href="http://www.maciejaniserowicz.com/post/2010/02/16/Skrypt-AutoHotkey-ulatwiajacy-prace-z-Git.aspx"&gt;Skrypt AutoHotkey ułatwiający pracę z Git&lt;/a&gt; &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;tortoise git      &lt;ul&gt;       &lt;li&gt;używam do logów i diffów z total commandera &lt;/li&gt;        &lt;li&gt;dla mnie osobiście najwygodniejsze &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;gitk      &lt;ul&gt;       &lt;li&gt;wbudowany log-viewer &lt;/li&gt;        &lt;li&gt;pokazuje stan indeksu vs stan working copy &lt;/li&gt;        &lt;li&gt;dla mnie mimo wszystko żółwik jest wygodniejszy &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;git gui      &lt;ul&gt;       &lt;li&gt;wbudowany 'okienkowy klient' do kontaktu z gitem &lt;/li&gt;        &lt;li&gt;przydaje mi się tylko gdy odpalam raz na jakiś czas żeby zobaczyć czy pora na 'cleanup'          &lt;ul&gt;           &lt;li&gt;sugeruje uruchomienie git gc jeśli jest taka potrzeba &lt;/li&gt;         &lt;/ul&gt;       &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;git extensions for visual studio      &lt;ul&gt;       &lt;li&gt;testowałem dawno temu, ale okazało się że tego nie potrzebuję          &lt;ul&gt;           &lt;li&gt;VS jest wystarczająco wolny bez dodatkowych obciążeń &lt;/li&gt;         &lt;/ul&gt;       &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;git source control provider      &lt;ul&gt;       &lt;li&gt;nie testowałem, ale j/w - nie potrzebuję; poza tym dodaje okna 'pending changes' etc... których nie chcę &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;nawigacja po narzędziach - u mnie      &lt;ul&gt;       &lt;li&gt;[win]+1 - total cmd (menu -&amp;gt; l -&amp;gt; enter = view log) &lt;/li&gt;        &lt;li&gt;[win]+2 - vs &lt;/li&gt;        &lt;li&gt;[win]+3 - git bash &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;&lt;strong&gt;Wow-factor:&lt;/strong&gt;&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;git bisect - identyfikacja commita powodującego błąd w systemie, na przestrzeni długiej historii [&lt;a href="http://www.maciejaniserowicz.com/post/2011/04/26/git-bisect.aspx"&gt;blog&lt;/a&gt;] &lt;/li&gt;    &lt;li&gt;git cherry-pick - przenoszenie jednego commita pomiędzy gałęziami &lt;/li&gt;    &lt;li&gt;git reflog - historia WSZYSTKICH operacji &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;&lt;strong&gt;Linki:&lt;/strong&gt;&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Git &lt;a href="http://git-scm.com/"&gt;http://git-scm.com/&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;Tortoise Git &lt;a href="http://code.google.com/p/tortoisegit/"&gt;http://code.google.com/p/tortoisegit/&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;Git-tfs &lt;a href="https://github.com/git-tfs/git-tfs"&gt;https://github.com/git-tfs/git-tfs&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;Git - dokumentacja &lt;a href="http://git-scm.com/documentation"&gt;http://git-scm.com/documentation&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;Git - tutorial &lt;a href="http://schacon.github.com/git/gittutorial.html"&gt;http://schacon.github.com/git/gittutorial.html&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;Git community book &lt;a href="http://book.git-scm.com/"&gt;http://book.git-scm.com/&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;&lt;a href="http://whygitisbetterthanx.com/"&gt;Why Git is Better than X&lt;/a&gt; - trochę tendencyjne, ale prawdziwe &lt;/li&gt;    &lt;li&gt;&lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;A successful Git branching model&lt;/a&gt; - dos-ko-na-ły post o jednej z możliwych strategii korzystania z gałęzi w Gicie; bardzo ciekawa lektura &lt;/li&gt; &lt;/ul&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Q5ljbXvMve4:O9AEIb9TDW8:QDrqXnVDFOM"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=QDrqXnVDFOM" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Q5ljbXvMve4:O9AEIb9TDW8:lt7SxnsiOIA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=lt7SxnsiOIA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Q5ljbXvMve4:O9AEIb9TDW8:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Q5ljbXvMve4:O9AEIb9TDW8:0VBWazUhMmc"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=0VBWazUhMmc" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Q5ljbXvMve4:O9AEIb9TDW8:D7DqB2pKExk"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?i=Q5ljbXvMve4:O9AEIb9TDW8:D7DqB2pKExk" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/maciejaniserowicz/~4/Q5ljbXvMve4" height="1" width="1"/&gt;</description><pubDate>Thu, 16 Feb 2012 07:02:00 +0100</pubDate><comments>http://www.maciejaniserowicz.com/post/2012/02/16/Notatki-z-internal-git-training.aspx#comment</comments><dc:publisher xmlns:dc="http://purl.org/dc/elements/1.1/">procent</dc:publisher><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/pingback.axd</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/post.aspx?id=804f4a90-9417-4db8-8144-6dfee949ea22</pingback:target><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">7</slash:comments><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.maciejaniserowicz.com/trackback.axd?id=804f4a90-9417-4db8-8144-6dfee949ea22</trackback:ping><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/post/2012/02/16/Notatki-z-internal-git-training.aspx#comment</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/syndication.axd?post=804f4a90-9417-4db8-8144-6dfee949ea22</wfw:commentRss><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.maciejaniserowicz.com/post.aspx?id=804f4a90-9417-4db8-8144-6dfee949ea22</feedburner:origLink></item><item><guid isPermaLink="false">http://www.maciejaniserowicz.com/post.aspx?id=7219aef0-7118-4632-8711-d1b39bd765ea</guid><link>http://feedproxy.google.com/~r/maciejaniserowicz/~3/jI6PW3g129U/post.aspx</link><author>procent</author><category>pro</category><title>Kilka odrębnych instancji Visual Studio naraz</title><description>&lt;p&gt;Od bardzo dawna VS służył mi do jednego-li tylko celu: programowania. Wraz z objęciem stanowiska DevLeada trochę się w tej kwestii zmieniło. Teraz wiżuala używam do trzech bardzo odmiennych celów. I każdy z nich potrzebuje trochę innej konfiguracji VS&lt;/p&gt;  &lt;p&gt;Na pierwszym miejscu nadal stawiam &lt;b&gt;programowanie&lt;/b&gt;. W tym trybie lubię mieć jasny tekst i ciemne tło - abstrahując od mniejszego zmęczenia oczu (bo nie wiem czy to prawda) czy jakichkolwiek innych argumentów, po prostu bardzo mi się taki wygląd podoba. Visual Studio &amp;quot;programistyczne&amp;quot; ma też sporo dodatków - a to default browser switcher, a to vs commands, a to power tools... Wszystko to spowalnia nasze IDE, na które jesteśmy skazani, ale co zrobić.&lt;/p&gt;  &lt;p&gt;Na miejscu drugim mamy &lt;b&gt;zarządzanie taskami w TFS&lt;/b&gt;. Jak &lt;a href="http://www.maciejaniserowicz.com/post/2012/01/26/Jak-usprawnic582em-swoja-prace-z-TFS.aspx"&gt;kiedyś pisałem&lt;/a&gt;, dedykuję sobie do tego celu osobną instancję, żeby nie zaśmiecać dodatkowymi okienkami miejsca do programowania. Tutaj nigdy nie otwieram kodu, więc nie obchodzi mnie jak wyglądają okienka. Tych TFSowych i tak nie można dostosować do swoich wymagań. Liczy się tylko liczba i TYP okienek porozmieszczanych po bokach. Nie potrzebuję Solution Explorera, Outputa, Immediate itd. Chcę tylko Team Explorera, żeby raz-dwa porozmieszczać sobie odpowiednio rezultaty najczęściej używanych zapytań.&lt;/p&gt;  &lt;p&gt;Na miejscu trzecim z końcu znajduje się &lt;b&gt;prezentowanie kodu na rzutniku&lt;/b&gt; na spotkaniach zespołu, wewnętrznych szkoleniach, demach itd. W tym przypadku nie sprawdzi się moja konfiguracja &amp;quot;programistyczna&amp;quot; - ciemne tło skutecznie utrudnia czytanie kodu wyświetlanego na ścianie, standardowa kolorystyka nadaje się do tego o wiele lepiej. Nie potrzebuję tu również wielu dodatków, wystarczy Resharper do sprawnego poruszania się po kodzie.&lt;/p&gt;  &lt;p&gt;Jak zatem to wszystko pogodzić? Rozwiązaniem problemu kolorystyki może być ciągłe ładowanie coraz to innych ustawień przez menu &amp;quot;&lt;i&gt;import/export settings&lt;/i&gt;&amp;quot;. Ale to takie... lamerskie.&lt;/p&gt;  &lt;p&gt;Znalazłem w tym tygodniu coś o wiele fajniejszego. Wystarczy bowiem uruchomić devenv.exe z parametrem &amp;quot;/RootSuffix&amp;quot;, a w systemie powstanie nowa, niezależna konfiguracja Visuala! Ona zapamięta nasze dedykowane dla siebie ustawienia, otwarte okienka i ich pozycję, konfigurację dodatków itd. Bomba!&lt;/p&gt;  &lt;p&gt;Teraz do programowania odpalam VS standardowo: &amp;quot;&lt;i&gt;devenv.exe&lt;/i&gt;&amp;quot;. Od razu odpalam też instancję &amp;quot;TFSową&amp;quot;: &amp;quot;&lt;i&gt;devenv.exe /RootSuffix tfs&lt;/i&gt;&amp;quot;. A do rzucenia kodu na ścianę: &amp;quot;&lt;i&gt;devenv.exe /RootSuffix presentation&amp;quot;&lt;/i&gt;. How cool is that, huh?&lt;/p&gt;  &lt;p&gt;Odpalenie VS z danym suffixem po raz pierwszy skutkuje:&lt;/p&gt;  &lt;p&gt;1) utworzeniem dedykowanych kluczy w rejestrze pod &amp;quot;&lt;i&gt;HKEY_CURRENT_USER\Software\Microsoft\VisualStudio&lt;/i&gt;&amp;quot;&lt;/p&gt;  &lt;p&gt;2) utworzeniem folderu na dysku w &amp;quot;&lt;i&gt;C:\Users\[user]\AppData\Local\Microsoft\VisualStudio&lt;/i&gt;&amp;quot;&lt;/p&gt;  &lt;p&gt;Ręczne skasowanie jednego i drugiego usuwa konfigurację danej instancji z systemu.&lt;/p&gt;  &lt;p&gt;Alternatywnie można ściągnąć &lt;a href="http://www.microsoft.com/download/en/details.aspx?id=21835"&gt;SDK do Visuala&lt;/a&gt; i zarządzać tymi instancjami za pomocą narzędzia &lt;a href="http://msdn.microsoft.com/en-us/library/dd875761.aspx"&gt;CreateExpInstance&lt;/a&gt; (do znalezienia w &lt;i&gt;C:\Program Files (x86)\Microsoft Visual Studio 2010 SDK SP1\VisualStudioIntegration\Tools\Bin&lt;/i&gt;), ale do takich zastosowań nie jest to w żadnym razie konieczne.&lt;/p&gt;  &lt;p&gt;Fajne, nie?&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=jI6PW3g129U:H9qk51K2xtw:QDrqXnVDFOM"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=QDrqXnVDFOM" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=jI6PW3g129U:H9qk51K2xtw:lt7SxnsiOIA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=lt7SxnsiOIA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=jI6PW3g129U:H9qk51K2xtw:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=jI6PW3g129U:H9qk51K2xtw:0VBWazUhMmc"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=0VBWazUhMmc" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=jI6PW3g129U:H9qk51K2xtw:D7DqB2pKExk"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?i=jI6PW3g129U:H9qk51K2xtw:D7DqB2pKExk" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/maciejaniserowicz/~4/jI6PW3g129U" height="1" width="1"/&gt;</description><pubDate>Mon, 13 Feb 2012 07:15:00 +0100</pubDate><comments>http://www.maciejaniserowicz.com/post/2012/02/13/Kilka-odrebnych-instancji-Visual-Studio-naraz.aspx#comment</comments><dc:publisher xmlns:dc="http://purl.org/dc/elements/1.1/">procent</dc:publisher><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/pingback.axd</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/post.aspx?id=7219aef0-7118-4632-8711-d1b39bd765ea</pingback:target><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">2</slash:comments><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.maciejaniserowicz.com/trackback.axd?id=7219aef0-7118-4632-8711-d1b39bd765ea</trackback:ping><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/post/2012/02/13/Kilka-odrebnych-instancji-Visual-Studio-naraz.aspx#comment</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/syndication.axd?post=7219aef0-7118-4632-8711-d1b39bd765ea</wfw:commentRss><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.maciejaniserowicz.com/post.aspx?id=7219aef0-7118-4632-8711-d1b39bd765ea</feedburner:origLink></item><item><guid isPermaLink="false">http://www.maciejaniserowicz.com/post.aspx?id=cd207010-4f7d-4e72-b52d-d0b777eea07b</guid><link>http://feedproxy.google.com/~r/maciejaniserowicz/~3/QoPVDjrWISE/post.aspx</link><author>procent</author><category>pro</category><title>Słowo na niedzielę, o wyższości TFS nad innymi systemami kontroli wersji</title><description>&lt;p&gt;Bardzo krótkie kazanko, będące poniekąd drugą w tym tygodniu autoreklamą tego samego autoproduktu.&lt;/p&gt;  &lt;p&gt;O wielu systemach kontroli wersji można powiedzieć, że są lepsze od innych. Podając na to wiele róznych argumentów.&lt;/p&gt;  &lt;p&gt;Poniższy cytat odpowiada na pytanie &amp;quot;&lt;em&gt;Why TFS is Better than X?&lt;/em&gt;&amp;quot;&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;It's NOT !!! End of story.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Źródło: &lt;a href="http://whytfsisbetterthanx.com/"&gt;http://whytfsisbetterthanx.com&lt;/a&gt;&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=QoPVDjrWISE:9qADeKDAuS0:QDrqXnVDFOM"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=QDrqXnVDFOM" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=QoPVDjrWISE:9qADeKDAuS0:lt7SxnsiOIA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=lt7SxnsiOIA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=QoPVDjrWISE:9qADeKDAuS0:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=QoPVDjrWISE:9qADeKDAuS0:0VBWazUhMmc"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=0VBWazUhMmc" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=QoPVDjrWISE:9qADeKDAuS0:D7DqB2pKExk"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?i=QoPVDjrWISE:9qADeKDAuS0:D7DqB2pKExk" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/maciejaniserowicz/~4/QoPVDjrWISE" height="1" width="1"/&gt;</description><pubDate>Sun, 12 Feb 2012 11:39:00 +0100</pubDate><comments>http://www.maciejaniserowicz.com/post/2012/02/12/Sc582owo-na-niedziele-o-TFS-i-innych-systemach-kontroli-wersji.aspx#comment</comments><dc:publisher xmlns:dc="http://purl.org/dc/elements/1.1/">procent</dc:publisher><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/pingback.axd</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/post.aspx?id=cd207010-4f7d-4e72-b52d-d0b777eea07b</pingback:target><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">4</slash:comments><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.maciejaniserowicz.com/trackback.axd?id=cd207010-4f7d-4e72-b52d-d0b777eea07b</trackback:ping><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/post/2012/02/12/Sc582owo-na-niedziele-o-TFS-i-innych-systemach-kontroli-wersji.aspx#comment</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/syndication.axd?post=cd207010-4f7d-4e72-b52d-d0b777eea07b</wfw:commentRss><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.maciejaniserowicz.com/post.aspx?id=cd207010-4f7d-4e72-b52d-d0b777eea07b</feedburner:origLink></item><item><guid isPermaLink="false">http://www.maciejaniserowicz.com/post.aspx?id=0ff1c2a6-4384-4f01-ad3e-d5208a84fee6</guid><link>http://feedproxy.google.com/~r/maciejaniserowicz/~3/lAJlCXGmgu0/post.aspx</link><author>procent</author><category>pro</category><title>TFS - WorkItem ID do schowka</title><description>&lt;p&gt;Niedawno poznałem w pracy magiczną kombinację klawiszy, która daje mi od tamtej pory wiele radości. O ile o radości może być w tym przypadku mowa.&lt;/p&gt;  &lt;p&gt;Chodzi o CTRL+G. Takie coś wciśnięte w VS w kontekście TFS wyświetli dialog box z polem na wpisanie ID interesującego nas workitema. Po wpisaniu tegoż otwiera się nowa zakładka z wybranym w ten sposób elementem. Baaaardzo się cieszę, że nauczyłem się tego po 3 tygodniach a nie 3 latach szukania tasków za pomocą sortowania wyników zapytań ORDER BY ID DESC.&lt;/p&gt;  &lt;p&gt;W miarę żarcia apetyt rośnie, więc teraz zachciało mi się operacji poniekąd odwrotnej. Mając wyniki zapytania chciałbym &amp;quot;jakoś&amp;quot; dostać do schowka ID wybranego workitema. ID a nie &amp;quot;work item shortcut&amp;quot;, bo właśnie idkami karmię z poziomu command line &lt;a href="http://www.maciejaniserowicz.com/post/2012/01/23/git-tfs-lek-na-prawie-cac582e-zc582o.aspx"&gt;git-tfs&lt;/a&gt;. ID, żeby dzielić się nimi w różnych kontekstach z zespołem (czy to w mailach, czy na skype, czy w opisach innych workitemów). ID, żeby wklejać je do budowanych &amp;quot;na bieżąco&amp;quot; zapytań. ID, żeby..... no, po prostu chciałem mieć ID, pirjod.&lt;/p&gt;  &lt;p&gt;Szukałem, szukałem, i nie znalazłem. Należało więc zakasać rękawy i poświęcić kwadrans na rozwiązanie tego problemu samemu. Jak wiadomo, klikniecie &amp;quot;ctrl+c&amp;quot; na wierszu w TFS skopiuje do schowka wszystkie widoczne informacje wraz z nazwami kolumn. Jest to zdecydowanie zbyt wiele syfu żeby za każdym razem ręcznie wyłuskiwać potem z tego gołe ID. Ale informacja taka może doskonale służyć jako input do prostego regexa wyszukującego ciąg cyfr i usuwający cała resztę.&lt;/p&gt;  &lt;p&gt;Poniżej skrypt autohotkey, który po wciśnięciu [win]+c wrzuca do schowka ID zaznaczonego itema. Jedno dodatkowe założenie: ID musi być pierwszą &amp;quot;liczbową&amp;quot; kolumną w raporcie z wynikami zapytania. Co chyba problemem nie jest, bo raczej tak to właśnie zwykle wygląda.&lt;/p&gt; &lt;!-- Code formatted with Procent.Samples: http://www.maciejaniserowicz.com/samples/CodeFormatter.aspx --&gt;  &lt;div class="csharp"&gt;   &lt;pre&gt;&lt;span class="csLineNumber"&gt;  1:&lt;/span&gt;  LWin &amp;amp; C::
&lt;span class="csLineNumber"&gt;  2:&lt;/span&gt;  clipboard =  ;
&lt;span class="csLineNumber"&gt;  3:&lt;/span&gt;  Send ^c
&lt;span class="csLineNumber"&gt;  4:&lt;/span&gt;  ClipWait  ;
&lt;span class="csLineNumber"&gt;  5:&lt;/span&gt;  ItemRow = %clipboard%
&lt;span class="csLineNumber"&gt;  6:&lt;/span&gt;  RegExMatch(ItemRow, &lt;span class="csString"&gt;&amp;quot;m)\d+&amp;quot;&lt;/span&gt;, ID)
&lt;span class="csLineNumber"&gt;  7:&lt;/span&gt;  clipboard =  %ID%
&lt;span class="csLineNumber"&gt;  8:&lt;/span&gt;  &lt;span class="csKeyword"&gt;return&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;A jeszcze korzystając z okazji zareklamuję swoje najnowsze, bo wczorajsze, dziecko.&lt;/p&gt;

&lt;p&gt;Znacie stronę &amp;quot;&lt;a href="http://whygitisbetterthanx.com/"&gt;Why Git is Better than X&lt;/a&gt;&amp;quot;? Jeśli nie - to zachęcam do odwiedzenia, bo znajduje się tam sporo interesujący informacji na temat Gita.&lt;/p&gt;

&lt;p&gt;Ja z kolei podszedłem do problemu z drugiej strony i otworzyłem klon: &amp;quot;&lt;a href="http://whytfsisbetterthanx.com/"&gt;Why TFS is Better than X&lt;/a&gt;&amp;quot;. Zapraszam również tam :).&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=lAJlCXGmgu0:tUNOTSlJd_w:QDrqXnVDFOM"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=QDrqXnVDFOM" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=lAJlCXGmgu0:tUNOTSlJd_w:lt7SxnsiOIA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=lt7SxnsiOIA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=lAJlCXGmgu0:tUNOTSlJd_w:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=lAJlCXGmgu0:tUNOTSlJd_w:0VBWazUhMmc"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=0VBWazUhMmc" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=lAJlCXGmgu0:tUNOTSlJd_w:D7DqB2pKExk"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?i=lAJlCXGmgu0:tUNOTSlJd_w:D7DqB2pKExk" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/maciejaniserowicz/~4/lAJlCXGmgu0" height="1" width="1"/&gt;</description><pubDate>Fri, 10 Feb 2012 07:24:00 +0100</pubDate><comments>http://www.maciejaniserowicz.com/post/2012/02/10/TFS-WorkItem-ID-do-schowka.aspx#comment</comments><dc:publisher xmlns:dc="http://purl.org/dc/elements/1.1/">procent</dc:publisher><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/pingback.axd</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/post.aspx?id=0ff1c2a6-4384-4f01-ad3e-d5208a84fee6</pingback:target><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">2</slash:comments><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.maciejaniserowicz.com/trackback.axd?id=0ff1c2a6-4384-4f01-ad3e-d5208a84fee6</trackback:ping><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/post/2012/02/10/TFS-WorkItem-ID-do-schowka.aspx#comment</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/syndication.axd?post=0ff1c2a6-4384-4f01-ad3e-d5208a84fee6</wfw:commentRss><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.maciejaniserowicz.com/post.aspx?id=0ff1c2a6-4384-4f01-ad3e-d5208a84fee6</feedburner:origLink></item><item><guid isPermaLink="false">http://www.maciejaniserowicz.com/post.aspx?id=bc20f8bd-31da-43b1-8d9b-d2118205794e</guid><link>http://feedproxy.google.com/~r/maciejaniserowicz/~3/Gx9F50q4xw8/post.aspx</link><author>procent</author><category>pro</category><title>Słowo na niedzielę, o powiększaniu zespołu projektowego</title><description>&lt;p&gt;Spory &amp;quot;percentaż&amp;quot; projektów informatycznych ma to do siebie, że ostatnie tygodnie ich trwania to wielka akcja gaszenia pożarów. Im większy projekt tym większa na to szansa. Termin się zbliża, liczba bugów rośnie, lista ficzerów do zaimplementowania nie chce się zmniejszać, a pracować więcej się po prostu nie da.&lt;/p&gt;  &lt;p&gt;Rozwiązanie wydaje się banalne: skoro aktualny zespół nie radzi sobie z nawałem zadań to dorzućmy do niego kilka osób! O ile w pewnej fazie projektu ma to sens (raczej bliżej jego początku niż końca) to takie postępowanie z projektem bliskim końca przyniesie raczej więcej szkody niż pożytku.&lt;/p&gt;  &lt;p&gt;Bo:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;Nine people can’t make a baby in a month&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Źródło: &lt;a href="http://en.wikipedia.org/wiki/Fred_Brooks"&gt;Fred Brooks&lt;/a&gt; (via &lt;a href="https://twitter.com/#!/CodeWisdom/status/139827138726596609"&gt;@codewisdom&lt;/a&gt;)&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Gx9F50q4xw8:UaRrPOLGxiY:QDrqXnVDFOM"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=QDrqXnVDFOM" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Gx9F50q4xw8:UaRrPOLGxiY:lt7SxnsiOIA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=lt7SxnsiOIA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Gx9F50q4xw8:UaRrPOLGxiY:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Gx9F50q4xw8:UaRrPOLGxiY:0VBWazUhMmc"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=0VBWazUhMmc" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Gx9F50q4xw8:UaRrPOLGxiY:D7DqB2pKExk"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?i=Gx9F50q4xw8:UaRrPOLGxiY:D7DqB2pKExk" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/maciejaniserowicz/~4/Gx9F50q4xw8" height="1" width="1"/&gt;</description><pubDate>Sun, 29 Jan 2012 10:14:49 +0100</pubDate><comments>http://www.maciejaniserowicz.com/post/2012/01/29/Sc582owo-na-niedziele-o-powiekszaniu-zespoc582u-projektowego.aspx#comment</comments><dc:publisher xmlns:dc="http://purl.org/dc/elements/1.1/">procent</dc:publisher><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/pingback.axd</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/post.aspx?id=bc20f8bd-31da-43b1-8d9b-d2118205794e</pingback:target><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">5</slash:comments><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.maciejaniserowicz.com/trackback.axd?id=bc20f8bd-31da-43b1-8d9b-d2118205794e</trackback:ping><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/post/2012/01/29/Sc582owo-na-niedziele-o-powiekszaniu-zespoc582u-projektowego.aspx#comment</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/syndication.axd?post=bc20f8bd-31da-43b1-8d9b-d2118205794e</wfw:commentRss><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.maciejaniserowicz.com/post.aspx?id=bc20f8bd-31da-43b1-8d9b-d2118205794e</feedburner:origLink></item><item><guid isPermaLink="false">http://www.maciejaniserowicz.com/post.aspx?id=f0cd7e6e-fae8-4689-a39f-8f84e5980da5</guid><link>http://feedproxy.google.com/~r/maciejaniserowicz/~3/xb6MJL1tMbc/post.aspx</link><author>procent</author><category>pro</category><title>Jak usprawniłem swoją pracę z TFS</title><description>&lt;p&gt;Jeżdżę sobie ostatnio po &lt;a href="http://www.maciejaniserowicz.com/?tag=/tfs"&gt;TFSie&lt;/a&gt; jak Heniek po łysej kobyle, ale żyć z tym trzeba. Poniżej kilka tipów, które uczyniły moje życie trochę lepszym. Z przeogromną wdzięcznością poczytam w komentarzach kolejne sugestie dotyczące dalszych uproszczeń.&lt;/p&gt;  &lt;h2&gt;1. git-tfs&lt;/h2&gt;  &lt;p&gt;&lt;a href="https://github.com/git-tfs/git-tfs"&gt;https://github.com/git-tfs/git-tfs&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Ten projekcik zdecydowanie na pierwszym miejscu. Ale ostatnio o nim się &lt;a href="http://www.maciejaniserowicz.com/post/2012/01/23/git-tfs-lek-na-prawie-cac582e-zc582o.aspx"&gt;osobno rozpisałem&lt;/a&gt;.&lt;/p&gt;  &lt;h2&gt;2. Telerik TFS Work Item Manager&lt;/h2&gt;  &lt;p&gt;&lt;a href="http://www.telerik.com/agile-project-management-tools/tfs.aspx"&gt;http://www.telerik.com/agile-project-management-tools/tfs.aspx&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Narzędzie mające pełnić rolę alternatywy dla VS. Jest darmowe, jest w becie, jest strasznie wolne (dużo wolniejsze niż VS!), ale pozwala na dwie bardzo przydatne rzeczy. Po pierwsze: na edycję wielu tasków naraz. Po drugie: oferuje dość fajny ekran do planowania iteracji. W skrócie: wybieramy iterację, którą będziemy planować, potem typ workitemów do porozrzucania, następnie atrybut użyty do zliczania &amp;quot;pracochłonności&amp;quot;, a na koniec ustalamy sumę wartości owego atrybutu dostępną podczas iteracji. Po takiej konfiguracji możemy dragiem i dropem poprzepisywać wybrane itemy do iteracji, ciągle monitorując jej &amp;quot;zapełnienie&amp;quot;. Daleko temu rozwiązaniu do ideału, ale i tak jest wygodniejsze niż robienie tego samego w VS lub Excelu.&lt;/p&gt;  &lt;h2&gt;3. &amp;quot;Compare&amp;quot; zamiast &amp;quot;Open&amp;quot; w oknie zmian&lt;/h2&gt;  &lt;p&gt;Po wciśnięciu &lt;i&gt;shift+enter&lt;/i&gt; zamiast &lt;i&gt;enter&lt;/i&gt; otwiera się &amp;quot;&lt;i&gt;compare...&lt;/i&gt;&amp;quot; a nie cały plik. Life saver.&lt;/p&gt;  &lt;h2&gt;4. Zmiana zachowania doubleclick w oknie zmian&lt;/h2&gt;  &lt;p&gt;&lt;strong&gt;Punkt 3&lt;/strong&gt;. to dla mnie za mało, chciałem mieć &amp;quot;&lt;i&gt;compare...&lt;/i&gt;&amp;quot; jako domyślną akcję dla double click oraz enter. Okazało się, że się da.&lt;/p&gt;  &lt;p&gt;Ale musimy zmodyfikować rejestr:&lt;/p&gt;  &lt;p&gt;Path: HKCU\Software\Microsoft\VisualStudio\&amp;lt;ver&amp;gt;\TeamFoundation\SourceControl\Behavior&amp;#160; &lt;br /&gt;Value: DoubleClickOnChange (DWORD)    &lt;br /&gt;0 == view as the primary command (default)&amp;#160; &lt;br /&gt;1== compare as primary command&lt;/p&gt;  &lt;p&gt;(za &lt;a href="http://www.richard-banks.org/2010/07/how-to-double-click-to-diff-pending.html"&gt;http://www.richard-banks.org/2010/07/how-to-double-click-to-diff-pending.html&lt;/a&gt;) &lt;/p&gt;  &lt;h2&gt;5. Zastąpienie diff/merge tool&lt;/h2&gt;  &lt;p&gt;Tools -&amp;gt; Options -&amp;gt; Source Control -&amp;gt; Visual Studio Team Foundation -&amp;gt; Configure User Tools. Ja wpisałem tam sobie ulubiony TortoiseDiff (tylko po instaluję TortoiseSVN).&lt;/p&gt;  &lt;p&gt;Bez tego... &lt;em&gt;cusz, ani rusz&lt;/em&gt;.&lt;/p&gt;  &lt;p&gt;(za &lt;a href="http://fooberry.com/2008/10/24/replacing-tfs-diff-tool/"&gt;http://fooberry.com/2008/10/24/replacing-tfs-diff-tool/&lt;/a&gt;)&lt;/p&gt;  &lt;h2&gt;6. Team Foundation Server Power Tools&lt;/h2&gt;  &lt;p&gt;&lt;a href="http://visualstudiogallery.msdn.microsoft.com/c255a1e4-04ba-4f68-8f4e-cd473d6b971f"&gt;http://visualstudiogallery.msdn.microsoft.com/c255a1e4-04ba-4f68-8f4e-cd473d6b971f&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Znowu: bez tego żyć się nie da. A w szczególności:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;&lt;strong&gt;alerts explorer&lt;/strong&gt; (right click na root) - skonfigurowałem tak, żeby dostawać maile o jakichkolwiek zmianach w moim projekcie - dzięki temu nie muszę sam wchodzić do TFS co jakiś czas i sprawdzać czy coś się zmienilo... czyli push vs pull notifications :) ; co prawda BARDZO mi brakuje &amp;quot;inteligentnych&amp;quot; powiadomień znanych w każdego właściwie innego systemu (typu &amp;quot;&lt;em&gt;Tester 1&lt;/em&gt; has assigned you a new bug&amp;quot;, &amp;quot;&lt;em&gt;Developer 1&lt;/em&gt; has finished a feature&amp;quot; itd), ale może znajdzie się i na to jakiś plugin... albo może w któryś weekend &amp;quot;sam się napisze&amp;quot;&lt;/li&gt;    &lt;li&gt;&lt;strong&gt;work item templates&lt;/strong&gt; - szablony do edycji wielu wierszy naraz, niezbyt wygodne ale czasami niezastąpione &lt;/li&gt;    &lt;li&gt;&lt;strong&gt;integracja z shell&lt;/strong&gt; - do ctx menu dodają się jakieś opcje, ale w sumie ich nie używam (z powodu pkt 1. w tym poście)&lt;/li&gt; &lt;/ul&gt;  &lt;h2&gt;7. Separacja &amp;quot;project management&amp;quot; od kodowania w IDE&lt;/h2&gt;  &lt;p&gt;W miarę możliwości wychodzę z proj mgmt poza VS. Tak jest o wiele wygodniej - w moim &amp;quot;koderskim&amp;quot; VS mam otwarte tylko pliki z kodem, a wszystko inne wyrzucam na zewnątrz. Połączenie tych dwóch aktywności w jednym narzędziu to jakaś porażka...&lt;/p&gt;  &lt;p&gt;Próbowałem TFS Web Access - strasznie wolne. Wspomniany Telerik - strasznie wolny. Na chwilę obecną najbardziej wydajnym/wygodnym rozwiązaniem okazuje się druga instancja VS, dedykowana dla TFSa. O wiele bardziej wolałbym jakieś szybkie, intuicyjne UI w przeglądarce, ale póki co - nie mam. Może w kolejnej wersji będzie to wyglądało lepiej, skoro będzie ona stała na Sharepoincie 2010 a nie 2007?&lt;/p&gt;  &lt;hr /&gt;  &lt;p&gt;Dzięki tym krokom z TFSem... nawet jakoś da się żyć. Co prawda nie jest to życie idealnie, ale nie jest bardzo źle. Po zastąpieniu kontroli wersji gitem, co jest krokiem zdecydowanie w całej procedurze najważniejszym, zostajemy tak naprawdę ze znośnym (choć czasem mega-denerwującym, ale mnie każdy soft czasami mega-denerwuje) narzędziem do operacji CRUD na obiektach &amp;quot;task&amp;quot;.&lt;/p&gt;  &lt;p&gt;Mam nadzieję, że komuś to pomoże. I że pod spodem coś ciekawego jeszcze podrzucicie:).&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=xb6MJL1tMbc:VXKHJyHsRDo:QDrqXnVDFOM"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=QDrqXnVDFOM" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=xb6MJL1tMbc:VXKHJyHsRDo:lt7SxnsiOIA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=lt7SxnsiOIA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=xb6MJL1tMbc:VXKHJyHsRDo:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=xb6MJL1tMbc:VXKHJyHsRDo:0VBWazUhMmc"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=0VBWazUhMmc" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=xb6MJL1tMbc:VXKHJyHsRDo:D7DqB2pKExk"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?i=xb6MJL1tMbc:VXKHJyHsRDo:D7DqB2pKExk" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/maciejaniserowicz/~4/xb6MJL1tMbc" height="1" width="1"/&gt;</description><pubDate>Thu, 26 Jan 2012 07:02:07 +0100</pubDate><comments>http://www.maciejaniserowicz.com/post/2012/01/26/Jak-usprawnic582em-swoja-prace-z-TFS.aspx#comment</comments><dc:publisher xmlns:dc="http://purl.org/dc/elements/1.1/">procent</dc:publisher><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/pingback.axd</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/post.aspx?id=f0cd7e6e-fae8-4689-a39f-8f84e5980da5</pingback:target><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">7</slash:comments><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.maciejaniserowicz.com/trackback.axd?id=f0cd7e6e-fae8-4689-a39f-8f84e5980da5</trackback:ping><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/post/2012/01/26/Jak-usprawnic582em-swoja-prace-z-TFS.aspx#comment</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/syndication.axd?post=f0cd7e6e-fae8-4689-a39f-8f84e5980da5</wfw:commentRss><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.maciejaniserowicz.com/post.aspx?id=f0cd7e6e-fae8-4689-a39f-8f84e5980da5</feedburner:origLink></item><item><guid isPermaLink="false">http://www.maciejaniserowicz.com/post.aspx?id=b1b14d3d-f219-4a04-a063-ea875882839a</guid><link>http://feedproxy.google.com/~r/maciejaniserowicz/~3/DWRIbqKGURU/post.aspx</link><author>procent</author><category>pro</category><title>git-tfs - lek na prawie całe zło</title><description>&lt;p&gt;Jak da się zauważyć - mam teraz na tapecie &lt;a href="http://www.maciejaniserowicz.com/?tag=/tfs"&gt;TFSa&lt;/a&gt;. I jeśli z całego tego zamieszania wyniknie choć jedna skonwertowana na &lt;a href="http://www.maciejaniserowicz.com/?tag=/git"&gt;gita&lt;/a&gt; osoba - z radości urządzę sobie kąpiel w kozim mleku i szampanie.&lt;/p&gt;  &lt;p&gt;Kilkukrotnie już wspominałem, że życie z TFS wcale nie musi oznaczać życia bez Gita. Wręcz przeciwnie - życie z TFS powinno &amp;quot;implicitly&amp;quot; kojarzyć się z wykorzystaniem Gita w celu obejścia największej porażki TFSa, czyli komponentu zajmującego się kontrolą wersji.&lt;/p&gt;  &lt;p&gt;Można to zrobić bardzo prosto. A co najlepsze - zwykły szary klepacz kodu nie potrzebuje do tego nawet zgody wszechmocnego team leadera, architekta, meneżera. Na zewnątrz nikt nawet nie musi się dowiedzieć, że u siebie lokalnie traktujemy TFS tylko jako zło konieczne a tak naprawdę pieścimy umysł Gitem i jego dobrami. Oczywiście nie zachęcam do takiego "sabotażu" - lepiej jest poinformować team o swoich zamiarach, może ktoś się przyłączy? Albo może ktoś będzie miał obiekcje (inne niż "bo nie!")?&lt;/p&gt;  &lt;p&gt;A jak to zrobić? Użyć genialnego, cudnego projektu &lt;a href="https://github.com/git-tfs/git-tfs"&gt;git-tfs&lt;/a&gt; potrafiącego służyć za proxy pomiędzy Gitem a TFSem (kto by się tego domyślił z nazwy?).&lt;/p&gt;  &lt;p&gt;Po kolei:&lt;/p&gt;  &lt;h2&gt;1. Ściągamy i instalujemy Gita&lt;/h2&gt;  &lt;p&gt;Stąd &lt;a href="http://git-scm.com/"&gt;http://git-scm.com/&lt;/a&gt;, a raczej stąd &lt;a href="http://code.google.com/p/msysgit/downloads/list?can=3"&gt;http://code.google.com/p/msysgit/downloads/list?can=3&lt;/a&gt;. Pierwszy link.&lt;/p&gt;  &lt;p&gt;Zaznaczamy dodanie '&lt;i&gt;Open git bash here&lt;/i&gt;' do shell extensions.&lt;/p&gt;  &lt;p&gt;Zaznaczamy '&lt;i&gt;autocrlf = false&lt;/i&gt;' (jako że wszyscy programujemy na Windowsach).&lt;/p&gt;  &lt;p&gt;Zaznaczamy dodanie Gita do PATH - ułatwi to pracę.&lt;/p&gt;  &lt;p&gt;Polecam lekturę mojego posta &lt;a href="http://www.maciejaniserowicz.com/post/2010/02/10/Git-poczatek.aspx"&gt;Git - początek&lt;/a&gt;, tam trochę więcej info na temat tego co warto skonfigurować od razu po instalacji.&lt;/p&gt;  &lt;p&gt;Ta informacja jest zawarta w podlinkowanym poście, ale powtórzę: warto doinstalować &lt;a href="http://code.google.com/p/tortoisegit/"&gt;TortoiseGit&lt;/a&gt;. Czasami wygodniej z tego poziomu prześledzić historię, wykonać diff albo puścić commit.&lt;/p&gt;  &lt;h2&gt;2. Ściągamy git-tfs&lt;/h2&gt;  &lt;p&gt;Stąd &lt;a href="https://github.com/git-tfs/git-tfs"&gt;https://github.com/git-tfs/git-tfs&lt;/a&gt;, a raczej stąd &lt;a href="https://github.com/git-tfs/git-tfs/downloads"&gt;https://github.com/git-tfs/git-tfs/downloads&lt;/a&gt;.&lt;/p&gt;  &lt;h2&gt;3. Rozpakowujemy git-tfs...&lt;/h2&gt;  &lt;p&gt;...i dodajemy ten katalog do PATH.&lt;/p&gt;  &lt;h2&gt;4. Tworzymy nowy folder dla nowego repozytorium...&lt;/h2&gt;  &lt;p&gt;...odpalamy konsolę (zwykły cmdline może być, ale bardzo polecam git bash - prawym na katalogu i 'open git bash here').&lt;/p&gt;  &lt;h2&gt;5. Ściągamy repo z TFS do Gita...&lt;/h2&gt;  &lt;p&gt;...komendą: git tfs clone https://&lt;i&gt;&amp;lt;Host&amp;gt;&lt;/i&gt;/&lt;i&gt;&amp;lt;ProjectCollection&amp;gt;&lt;/i&gt; $/&lt;i&gt;&amp;lt;ProjectName&amp;gt;&lt;/i&gt;&lt;/p&gt;  &lt;h2&gt;6. Pozbywamy się bindingu z TFSem...&lt;/h2&gt;  &lt;p&gt;... najlepiej bez modyfikacji plików .sln czy .csproj. Czyli wyłączamy sieć (czy to kabel czy wifi), otwieramy sln i czekamy aż VS bardzo rozsądnie przejdzie w tryb offline. Po załadowaniu projektu wyłączamy VS, podłączamy sieć, otwieramy ponownie .sln... hurra, jesteśmy oderwani od TFSa bez żadnych zmian w projekcie!&lt;/p&gt;  &lt;h2&gt;7. Konfigurujemy pliki, które powinny być ignorowane przez Git...&lt;/h2&gt;  &lt;p&gt;... czyli wszystkie &lt;i&gt;*.suo&lt;/i&gt;, &lt;i&gt;*.cache&lt;/i&gt;, śmieci generowane przez Resharpera itd. O samym ignorowaniu więcej pisałem w poście &lt;a href="http://www.maciejaniserowicz.com/post/2010/02/11/Git-a-ignorowanie-plikow.aspx"&gt;Git a ignorowanie plików&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Przykładowa początkowa zawartość takiego pliku, która przyda się w każdym projekcie, wygląda tak:&lt;/p&gt;  &lt;p&gt;#####################   &lt;br /&gt;# Visual Studio    &lt;br /&gt;#####################    &lt;br /&gt;*.user    &lt;br /&gt;*.suo    &lt;br /&gt;*.sln.cache    &lt;br /&gt;#####################    &lt;br /&gt;# Build    &lt;br /&gt;#####################    &lt;br /&gt;bin/    &lt;br /&gt;obj/    &lt;br /&gt;#####################    &lt;br /&gt;# Resharper    &lt;br /&gt;#####################    &lt;br /&gt;*.resharper    &lt;br /&gt;*\_ReSharper*    &lt;br /&gt;*_ReSharper*    &lt;br /&gt;#####################    &lt;br /&gt;# StyleCop    &lt;br /&gt;#####################    &lt;br /&gt;StyleCop.Cache&lt;/p&gt;  &lt;p&gt;&lt;b&gt;Pro-tip&lt;/b&gt;: jeśli faktycznie nie chcemy, aby ktokolwiek dowiedział się, że używamy Gita, to nie możemy oczywiście pchnąć pliku .gitignore do TFSa. Ale możemy zastosować super-sprytną sztuczkę którą minutę temu wymyśliłem i przetestowałem:). Do pliku .gitignore możemy dodać linijkę &amp;quot;&lt;i&gt;.gitignore&lt;/i&gt;&amp;quot; i... plik ten spowoduje ignorowanie samego siebie, jednocześnie nadal wpływając na zachowanie Gita! Mirakulus!&lt;/p&gt;  &lt;h2&gt;&lt;font style="font-weight: bold"&gt;8. Uczymy się Gita...&lt;/font&gt;&lt;/h2&gt;  &lt;p&gt;... aż pogrubiłem ten punkt. BARDZO zalecam wcześniejsze pobawienie się samym Gitem poza prawdziwym projektem, poczytanie dokumentacji etc. Co prawda nawet bez tego prawdopodobnie nic nie spieprzymy (tym bardziej że żadne zmiany nie zostaną wypchnięte do TFSa dopóki jawnie tego nie rozkażemy), ale mimo wszystko warto poznać Gita głębiej. Materiałów jest cała masa, kilka przydatnych linków podałem w poście &lt;a href="http://www.maciejaniserowicz.com/post/2010/02/09/Git-rozproszony-system-kontroli-wersji-(DVCS).aspx"&gt;Git - rozproszony system kontroli wersji&lt;/a&gt;.&lt;/p&gt;  &lt;h2&gt;9. Pracujemy...&lt;/h2&gt;  &lt;p&gt;...nie przejmując się exclusive lockami, niewygodnymi branchami, niedziałającym merge. Po prostu: cieszymy się wszystkim co wymieniłem w poście &lt;a href="http://www.maciejaniserowicz.com/post/2012/01/18/W-czym-Git-jest-lepszy-od-TFS.aspx"&gt;W czym Git jest lepszy od TFS?&lt;/a&gt; ... i nie tylko.&lt;/p&gt;  &lt;h2&gt;10. Wypychamy zmiany do TFSa...&lt;/h2&gt;  &lt;p&gt;...komendą &lt;i&gt;git tfs ct&lt;/i&gt;, czyli skrótem od &lt;i&gt;git tfs checkintool&lt;/i&gt;. Otwiera to znane, standardowe TFSowe okienko do commitowania. Możemy tam sobie skojarzyć zmiany z taskami, edytować komentarz itd.&lt;/p&gt;  &lt;p&gt;Przydatny przełącznik:&amp;#160; &lt;i&gt;--build-default-comment&lt;/i&gt;. Powoduje ono przerzucenie commit messages z Gita do okienka TFSowego checkin-toola.&lt;/p&gt;  &lt;p&gt;Ewentualnie robimy z tego &lt;i&gt;shelve&lt;/i&gt; jeśli wola:&lt;/p&gt;  &lt;p&gt;&lt;i&gt;git tfs shelve A_SHELVESET_NAME&lt;/i&gt;&lt;/p&gt;  &lt;h2&gt;11. Radujemy się...&lt;/h2&gt;  &lt;p&gt;...siwiejemy wolniej, życie jest zajebistsze, ptaszki ćwierkają, słonko świeci etc. Praca znowu jest przyjemna.&lt;/p&gt;  &lt;hr /&gt;  &lt;p&gt;&lt;b&gt;Uwaga uwaga achtung achtung !!!&lt;/b&gt;&lt;/p&gt;  &lt;p&gt;Wszystkie zmiany wysyłane do TFSa są łączone w jeden wielki commit! Jest to zachowanie &amp;quot;&lt;i&gt;by design&lt;/i&gt;&amp;quot;.&lt;/p&gt;  &lt;p&gt;Cytat z &lt;a href="http://groups.google.com/group/git-tfs-dev/browse_thread/thread/c9b921286a746918#"&gt;http://groups.google.com/group/git-tfs-dev/browse_thread/thread/c9b921286a746918&lt;/a&gt;:&lt;/p&gt;  &lt;p&gt;&amp;quot;&lt;i&gt;checkintool is just a convenient tool to make last minute review of your changes and is not supposed to select things to checkin&lt;/i&gt;&amp;quot;&lt;/p&gt;  &lt;p&gt;Jednak pierwsze co ja zrobiłem to złamanie tej zasady: tak nie mogłem się doczekać eksperymentowania z git-tfs, że nie zagłębiałem się w szczegóły i puściłem checkin odznaczając niektóre pliki. Efektem było kilka chwil konfuzji, ponieważ git-tfs się pogubił i nie do końca wiedział co się dzieje, nie wykrywając po tej operacji, że zostało coś jeszcze do wypchnięcia. Pomogła komenda &lt;i&gt;git tfs pull&lt;/i&gt; która naprawiła lokalny stan.&lt;/p&gt;  &lt;p&gt;Jeśli jednak chcemy zachować wszystkie swoje commity i faktycznie mieć je odwzorowane 1:1 w TFSie zamiast tworzyć jeden duży commit (ja chcę) to rozwiązaniem jest komenda rcheckin: &lt;a href="https://github.com/git-tfs/git-tfs/wiki/Rcheckin"&gt;https://github.com/git-tfs/git-tfs/wiki/Rcheckin&lt;/a&gt;. Puszcza ona commit po commicie do TFS, zachowując komentarze z Gita. Ale uwaga: to z kolei nie wyświetla checkintool, więc trzeba podać id powiązanego taska w cmdline (albo potem linkować je ręcznie, co mi się już kilkukrotnie zdarzyło)!&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Na koniec ciekawe linki:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://elegantcode.com/2011/03/15/git-tfs-where-have-you-been-all-my-life/"&gt;http://elegantcode.com/2011/03/15/git-tfs-where-have-you-been-all-my-life/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href="http://lostechies.com/jimmybogard/2011/09/20/git-workflows-with-git-tfs/"&gt;http://lostechies.com/jimmybogard/2011/09/20/git-workflows-with-git-tfs/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;A na jeszcze bardziej końcowy koniec: co prawda ten tutorial wystarczy do rozpoczęcia zabawy z git-tfs, ale niech każdy najpierw poeksperymentuje sobie lokalnie z Gitem. Można w nim sprawnie działać na ślepo, ale świadome korzystanie z bardziej zaawansowanych funkcjonalności daje o wiele większą frajdę.&lt;/p&gt;  &lt;p&gt;Reklamacji nie przyjmuję, odpowiedzialności nie biorę! Poświadczam jedynie, że sam korzystam i jestem z tego powodu mega-zadowolony.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Aha, i jakby ktoś się jeszcze nie zorientował: audycja zawierała lokowania &lt;a href="http://git-scm.com/"&gt;produktu&lt;/a&gt;.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=DWRIbqKGURU:C4f-jFUYEsc:QDrqXnVDFOM"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=QDrqXnVDFOM" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=DWRIbqKGURU:C4f-jFUYEsc:lt7SxnsiOIA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=lt7SxnsiOIA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=DWRIbqKGURU:C4f-jFUYEsc:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=DWRIbqKGURU:C4f-jFUYEsc:0VBWazUhMmc"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=0VBWazUhMmc" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=DWRIbqKGURU:C4f-jFUYEsc:D7DqB2pKExk"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?i=DWRIbqKGURU:C4f-jFUYEsc:D7DqB2pKExk" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/maciejaniserowicz/~4/DWRIbqKGURU" height="1" width="1"/&gt;</description><pubDate>Mon, 23 Jan 2012 07:15:00 +0100</pubDate><comments>http://www.maciejaniserowicz.com/post/2012/01/23/git-tfs-lek-na-prawie-cac582e-zc582o.aspx#comment</comments><dc:publisher xmlns:dc="http://purl.org/dc/elements/1.1/">procent</dc:publisher><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/pingback.axd</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/post.aspx?id=b1b14d3d-f219-4a04-a063-ea875882839a</pingback:target><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">9</slash:comments><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.maciejaniserowicz.com/trackback.axd?id=b1b14d3d-f219-4a04-a063-ea875882839a</trackback:ping><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/post/2012/01/23/git-tfs-lek-na-prawie-cac582e-zc582o.aspx#comment</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/syndication.axd?post=b1b14d3d-f219-4a04-a063-ea875882839a</wfw:commentRss><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.maciejaniserowicz.com/post.aspx?id=b1b14d3d-f219-4a04-a063-ea875882839a</feedburner:origLink></item><item><guid isPermaLink="false">http://www.maciejaniserowicz.com/post.aspx?id=58e08a89-569b-4811-a270-c2aa8d64dff5</guid><link>http://feedproxy.google.com/~r/maciejaniserowicz/~3/0yKLKRC5GjY/post.aspx</link><author>procent</author><category>pro</category><title>W czym Git jest lepszy od TFS?</title><description>&lt;p&gt;[ &lt;i&gt;uwaga: w tym poście piszę o aspekcie &lt;b&gt;kontroli wersji w TFS&lt;/b&gt;, a nie o TFS jako całym kombajnie do zarządzania projektem; powinno to być oczywiste, ale mimo wszystko zaznaczam żeby nie było zażaleń&lt;/i&gt; ]&lt;/p&gt;  &lt;p&gt;Programiści znający oba rozwiązania, zobaczywszy tytuł posta, mogą się tylko uśmiechnąć i mruknąć: &amp;quot;&lt;i&gt;a o czym tu w ogóle pisać? we wszystkim!&lt;/i&gt;&amp;quot;.&lt;/p&gt;  &lt;p&gt;Jednak osoby znające TYLKO TFSa nie chcą, złośliwcy, wierzyć na słowo dopóki nie zobaczą. No cóż, nie będą błogosławieni, ich strata. Postaram się jednak spisać tutaj kilka rzeczy, które być może zaciekawią co bardziej otwarte umysły i skłonią do zainteresowania alternatywą dla ich ukochanego molocha. Nie jest to bynajmniej pełna lista, a raczej zrzut mojego wewnętrznego RAMu po kilkunastu minutach krótkiej refleksji.&lt;/p&gt;  &lt;h2&gt;DVCS&lt;/h2&gt;  &lt;p&gt;Wiele z przewag Gita nad TFS wynika z zasadniczych różnic pomiędzy scentralizowanym a zdecentralizowanym podejściem do kontroli wersji. Więcej na ten temat pisałem w postach &lt;a href="http://www.maciejaniserowicz.com/post/2010/02/09/Git-rozproszony-system-kontroli-wersji-(DVCS).aspx"&gt;Git - rozproszony system kontroli wersji&lt;/a&gt; oraz &lt;a href="http://www.maciejaniserowicz.com/post/2010/02/08/Dlaczego-juz-nie-lubie-SVN.aspx"&gt;Dlaczego już nie lubię SVN&lt;/a&gt;. Zapraszam również tam, a póki co...&lt;/p&gt;  &lt;h2&gt;Praca offline&lt;/h2&gt;  &lt;p&gt;Wiem, że TFS oferuje koncepcję &amp;quot;pracy offline&amp;quot;. Ale co to za praca? Wielkiej łaski VS mi nie robi że pozwoli zmodyfikować pliki jeśli nie mam połączenia z internetem - tego by jeszcze brakowało, żebym nie mógł tego robić! Nie ma to zbyt wiele wspólnego z kontrolą wersji. Pracując z DVCS mam LOKALNIE dostęp do całej historii. Mogę więc przeglądać commity, robić diffy, chodzić między wersjami, czytać logi - wszystko to bez jakiegokolwiek kontaktu ze zdalnym serwerem. Oprócz samego faktu, że mogę to robić offline, bardzo ważna jest też jeszcze jedna kwestia: WYDAJNOŚĆ. Tego nie da się porównać. Podczas gdy TFS musi skontaktować się z serwerem aby wykonać prawie każdą operację, Git ma wszystko czego potrzebuje u mnie, na mojej maszynie. Jedyne co może ograniczać wydajność takiego rozwiązania to prędkość dysku twardego, która przy coraz większej dostępności SSD powoli staje się czynnikiem pomijalnym.&lt;/p&gt;  &lt;h2&gt;Lokalne commity&lt;/h2&gt;  &lt;p&gt;Ten punkt można równie dobrze wciągnąć pod poprzedni akapit, ale jest tak zajebiście istotny, że potraktuję go osobno. Jeśli się tego wcześniej nie doświadczyło to naprawdę trudno jest sobie wyobrazić swobodę i komfort, jaka za tym idzie. Równie trudno jest mi teraz wyobrazić sobie pracę bez takiej możliwości. Mogę robić commity choćby co pięć minut - więc moja working copy jest prawie cały czas &amp;quot;czysta&amp;quot; a stan lokalnego repozytorium - zdatny do użytku. Dzięki temu koniec z problemami typu &amp;quot;&lt;i&gt;dobra, coś spieprzyłem, jak teraz wrócić do stanu, który działał?&lt;/i&gt;&amp;quot;. Teraz nie jest to problemem - wiem, że commit z działającym kodem&amp;#160; zrobiłem chwilę temu, zatem mogę spokojnie powrócić do tej wersji i zacząć od początku. To jak nieskończona liczba żyć w grze komputerowej, albo cheat włączający &lt;i&gt;god mode&lt;/i&gt;. Mało tego - wcale nie muszę tych wszystkich commitów synchronizować z całym zespołem! Po zakończeniu pracy nad jakimś ficzerem poświęcam kilka chwil na analizę swojej pracy (zorganizowanej w niewielkie commity) i tak nimi manipuluję, żeby ich historia i zawartość nie śmieciła w repozytorium, jednocześnie zachowując całą drogę jaką przebyłem od &amp;quot;nie działa&amp;quot; do &amp;quot;działa&amp;quot;. I taką zmodyfikowaną historię wysyłam w miejsce &amp;quot;kontaktu&amp;quot; z resztą dev-teamu.&lt;/p&gt;  &lt;p&gt;Nie można mylić tego z funkcjonalnością &amp;quot;shelve&amp;quot; oferowaną przez TFS. Podobna rzecz jest zawarta również w Gicie (&amp;quot;stash&amp;quot;), ale to zupełnie inna koncepcja.&lt;/p&gt;  &lt;h2&gt;Pliki readonly? NIE!&lt;/h2&gt;  &lt;p&gt;Git nie traktuje naszego kodu jako &amp;quot;solucji-polucji&amp;quot; edytowalnej z jednego-li tylko, właściwego narzędzia. Git traktuje całe rozwiązanie jako zera i jedynki porozrzucane między plikami. Możemy więc edytować co chcemy i jak chcemy, a Git sam zobaczy co i jak zostało zmodyfikowane. Bez ograniczeń. Mało tego - Git jest na tyle sprytny, że sam wykryje taką choćby operację jak &amp;quot;rename&amp;quot;!&lt;/p&gt;  &lt;h2&gt;Checkout / exclusive lock? STOP!&lt;/h2&gt;  &lt;p&gt;Wiem, że niektóre zespoły zmuszone są przez TFS (a raczej jego prymitywny, niedziałający, żenujący merge) do stosowania &amp;quot;exclusive locks&amp;quot;, czyli tylko jedna osoba może pracować nad danym plikiem. Przecież to jest ograniczenie tak durne i tak niesamowicie nielogiczne! Co komu do tego nad czym pracuję? Co mi do tego który plik zmienia ktoś inny? A co jeśli jest to .csproj, albo jeśli robię refactoring dotykający kilkunastu klas? Cały zespół ma czekać aż skończę? Albo, co gorsza, ja mam czekać aż ktoś coś skończy?;) Niech każdy zajmie się swoją robotą, a system kontroli wersji niech domyśli się jak z tym sobie poradzić i pomoże nam w połączeniu zmian.&lt;/p&gt;  &lt;p&gt;W Gicie nie jest to problemem - algorytm merge'owania zmian jest tak dobry, że bardzo sporadycznie zachodzi konieczność ręcznej manipulacji plikami przy tym procesie. A nawet jak już zachodzi to bez większego problemu można z tym sobie poradzić.&lt;/p&gt;  &lt;p&gt;Czyż nie lepiej jest zająć się swoją robotą zamiast czekać aż kolego z biurka obok (jak mamy szczęście) lub z innego kontynentu (jak mamy pecha) &amp;quot;zwolni&amp;quot; plik?&lt;/p&gt;  &lt;h2&gt;Branche? TAK!&lt;/h2&gt;  &lt;p&gt;Gałęzie w TFS traktowane są bardziej jako narzędzie do oznaczania &amp;quot;wersji na produkcji&amp;quot;. Czyli przed wdrożeniem robi się nowy branch, a cały zespół dalej jedzie na jednej głównej gałęzi. Dlaczego? Bo w TFS nie działa merge, przez co programiści nie mają nawet możliwości eksplorować niezwykłej potęgi jaką daje bezbolesne rozgałęzianie kodu.&lt;/p&gt;  &lt;p&gt;A co powiecie na lokalne branche? Typowy workflow u programisty pracującego z Gitem wg zasady &amp;quot;branch per feature&amp;quot; wygląda tak: zrób gałąź -&amp;gt; pracuj -&amp;gt; ściągnij najnowszą wersję gałęzi głównej -&amp;gt; połącz swoją gałąź z gałęzią główną -&amp;gt; wypchnij zmiany na zewnątrz. Przy czym krok 2) może być przerwany przez najróżniejsze &amp;quot;wrzuty&amp;quot;. Wyobraźmy sobie, że implementuję jakiś fajny ficzer, aż tu nagle przychodzi zgłoszenie: na produkcji wyskoczył błąd, masz rzucić wszystko i się nim zająć! W Gicie po prostu wracam do głównej gałęzi, zostawiając całą swoją pracę w &amp;quot;feature branch&amp;quot;, robię co jest do zrobienia, i ponownie przełączam się do przerwanej pracy. Nie mówcie że nie znacie tego z autopsji.&lt;/p&gt;  &lt;hr /&gt;  &lt;p&gt;To tylko wierzchołek góry lodowej, bo możliwości Gita są po prostu ogromne. I TFS nie jest w NICZYM lepszy (nie zaryzykuję stwierdzenia, że jest gorszy&amp;#160; we WSZYSTKIM).&lt;/p&gt;  &lt;p&gt;Naprawdę zachęcam do bliższego poznania Gita. Na blogu &lt;a href="http://www.maciejaniserowicz.com/?tag=/git"&gt;pisałem o nim kilkukrotnie&lt;/a&gt; pokazując co fajniejsze ficzery (jak &lt;a href="http://www.maciejaniserowicz.com/post/2010/02/17/Modyfikacja-historii-w-Gicie.aspx"&gt;modyfikacja historii&lt;/a&gt; czy &lt;a href="http://www.maciejaniserowicz.com/post/2011/04/26/git-bisect.aspx"&gt;bisect&lt;/a&gt;), w necie też jest tego sporo... I wkrótce kolejne kilka słów z mojej strony na ten temat, ponownie w kontekście TFSa.&lt;/p&gt;  &lt;p&gt;Teraz chętnie poczytam kolejne komentarze w stylu &amp;quot;&lt;i&gt;używam TFSa i nic z tego co napisałeś nie jest mi potrzebne&lt;/i&gt;&amp;quot;. 3, 2, 1 GO!&lt;/p&gt;  &lt;p&gt;A tak na serio: jeśli masz, Czytelniku Najsłodszy, ochotę coś takiego napisać, to zrób mi tę przyjemność i naprawdę daj, choćby na kilka dni, szansę Gitowi. Obiecuję: jeśli podejdziesz do tego z odpowiednim nastawieniem (czyli innym niż &amp;quot;&lt;i&gt;udowodnię sobie i wszystkim że TFS mi wystarcza&lt;/i&gt;&amp;quot;) - nie zawiedziesz się, a Twój codzienny komfort wzrośnie. Czyż nie na tym m.in. polega nasza praca - szukaniu i stosowaniu coraz to lepszych rozwiązań?&lt;/p&gt;  &lt;p&gt;P.S. Oczywiście (prawie) wszystkie powyższe punkty znajdują zastosowanie nie tylko w konfrontacji Git-TFS, ale także Mercurial-TFS czy Git-SVN. Jednak moja obecna sytuacja opiera się na tych dwóch narzędziach, więc i na nich się skupiam.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=0yKLKRC5GjY:_jWOwGMaXmg:QDrqXnVDFOM"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=QDrqXnVDFOM" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=0yKLKRC5GjY:_jWOwGMaXmg:lt7SxnsiOIA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=lt7SxnsiOIA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=0yKLKRC5GjY:_jWOwGMaXmg:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=0yKLKRC5GjY:_jWOwGMaXmg:0VBWazUhMmc"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=0VBWazUhMmc" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=0yKLKRC5GjY:_jWOwGMaXmg:D7DqB2pKExk"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?i=0yKLKRC5GjY:_jWOwGMaXmg:D7DqB2pKExk" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/maciejaniserowicz/~4/0yKLKRC5GjY" height="1" width="1"/&gt;</description><pubDate>Wed, 18 Jan 2012 07:20:00 +0100</pubDate><comments>http://www.maciejaniserowicz.com/post/2012/01/18/W-czym-Git-jest-lepszy-od-TFS.aspx#comment</comments><dc:publisher xmlns:dc="http://purl.org/dc/elements/1.1/">procent</dc:publisher><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/pingback.axd</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/post.aspx?id=58e08a89-569b-4811-a270-c2aa8d64dff5</pingback:target><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">24</slash:comments><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.maciejaniserowicz.com/trackback.axd?id=58e08a89-569b-4811-a270-c2aa8d64dff5</trackback:ping><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/post/2012/01/18/W-czym-Git-jest-lepszy-od-TFS.aspx#comment</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/syndication.axd?post=58e08a89-569b-4811-a270-c2aa8d64dff5</wfw:commentRss><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.maciejaniserowicz.com/post.aspx?id=58e08a89-569b-4811-a270-c2aa8d64dff5</feedburner:origLink></item><item><guid isPermaLink="false">http://www.maciejaniserowicz.com/post.aspx?id=4ce203c0-8e35-4e61-a521-2e37cf03d571</guid><link>http://feedproxy.google.com/~r/maciejaniserowicz/~3/FO0Tyye5rCw/post.aspx</link><author>procent</author><category>pro</category><title>TFS po pierwszym tygodniu</title><description>&lt;p&gt;Tak jak wspominałem w swoim &lt;a href="http://www.maciejaniserowicz.com/post/2012/01/02/Remanent-20112012.aspx"&gt;rocznym podsumowaniu&lt;/a&gt; - wraz ze zmianą cyferek w kalendarzu znacznej zmianie uległa moja sytuacja zawodowa. Co za tym idzie - musiałem przeprosić się ze znienawidzonym TFSem. Właśnie minął mój pierwszy tydzień z tym narzędziem i postanowiłem zebrać swoje dotychczasowe wrażenia.&lt;/p&gt;  &lt;h2&gt;Kontekst&lt;/h2&gt;  &lt;p&gt;Nie jest to moje pierwsze TFSowe randewu. Wcześniej korzystałem z niego dwukrotnie - zawsze babrając się jako programista tylko w kontroli wersji, bez łorkajtemów, uzerstoris etc. Efektem była gruba, kolczasta, płonąca i ociekająca żerczym kwasem ściana nienawiści między nami. Przyrzekałem sobie że &amp;quot;nigdy więcej&amp;quot;, aż tu nagle... No ale, życie przynosi niespodzianki.&lt;/p&gt;  &lt;p&gt;Z pewnym zaskoczeniem zauważam, że do tej pory prawie nie poruszałem tego tematu na blogu, znalazłem raptem jeden post z &lt;a href="http://www.maciejaniserowicz.com/?tag=/tfs"&gt;tagiem &amp;quot;tfs&amp;quot;&lt;/a&gt;. Wygląda na to, że czas to zmienić.&lt;/p&gt;  &lt;h2&gt;Od strony &amp;quot;meneżera&amp;quot;&lt;/h2&gt;  &lt;p&gt;Zakres moich obowiązków się zmienił. Teraz interesuje mnie nie tylko kontrola wersji, ale także zarządzanie zadaniami, obserwowanie postępu, monitorowanie pracy zespołu itd. Co prawda od lat jako freelancer musiałem ogarniać całościowo większość tworzonych przez siebie projektów, jednak nie była to &amp;quot;praca zespołowa&amp;quot; w pełnym znaczeniu tych słów. Teraz jest trochę inaczej i z tej perspektywy nigdy na TFS nie patrzyłem. Muszę niestety przyznać: spod nowego kąta wygląda całkiem imponująco.&lt;/p&gt;  &lt;p&gt;Mam porównanie z wieloma systemami do zarządzania projektem (to temat na osobnego posta, do którego notatki zbieram od roku) i w większości z nich samo &amp;quot;zarządzanie pracą&amp;quot;, czyli wprowadzanie i edycja zadań, jest o wiele wygodniejsza. Ale za to możliwości raportowania w TFS zrobiły na mnie spore wrażenie. Wszystkie te statystyki ubrane w wykresy i diagramy wyglądają bardzo użytecznie - odpowiednio wykorzystane faktycznie mogą dać kontrolę nad projektem i w miarę szybkie zorientowanie się w aktualnym stanie prac. Z czymś tak zaawansowanym jeszcze się wcześniej nie spotkałem - to był najsłabszy punkt innych stosowanych przeze mnie rozwiązań.&lt;/p&gt;  &lt;p&gt;No i to właściwie tyle z perspektywy team leadera: średnio wygodne definiowanie/przydzielanie/edycja zadań i bardzo imponujące raportowanie. I uwaga: to ostatnie działa niesamowicie wolno, ale nie wiem czy to kwestia konfiguracji środowiska czy samego TFSa.&lt;/p&gt;  &lt;h2&gt;Od strony programisty&lt;/h2&gt;  &lt;p&gt;Tutaj wchodzimy w obszar, który wcześniej tak mnie do TFSa zniechęcił. Minęło kilka lat... i nic się nie zmieniło. Pierwsze wrażenie: podpinam się z VS pod ProjectCollection i kwadrans spędzam gapiąc się na komunikat &amp;quot;&lt;i&gt;Contacting server to get list of items to update&lt;/i&gt;&amp;quot;.&lt;/p&gt;  &lt;p&gt;Chcę zobaczyć kiedy projekt został aktualizowany, więc spoglądam na kolumnę &amp;quot;&lt;i&gt;last check-in&lt;/i&gt;&amp;quot; w roocie projektu: a tam jakaś data sprzed lat. Dopiero zagłębienie się w odpowiedni folder podało mi w tej kolumnie datę, której szukałem. Szczęka mi opadła i kilka włosów od razu posiwiało - przecież to jest tak głupie, że aż nie do wiary!&lt;/p&gt;  &lt;p&gt;No ale dobra, mam w końcu projekt na dysku, lecimy dalej...&lt;/p&gt;  &lt;p&gt;Wchodzę w jakiś katalog z poziomu Total Commandera (dość często edytuję pliki poza VS, bo tak bywa o wiele sprawniej - bądź też pliki nie są dołączone do .sln), otwieram coś w notepad2, modyfikuję, zapisuję... i zonk. Plik jest readonly. Odhaczam więc ten atrybut we właściwościach pliku, zapisuję bez problemu, chcę zmianę pchnąć do repozytorium... i zaskoczenie. Okienko &amp;quot;&lt;i&gt;Pending changes&lt;/i&gt;&amp;quot; nie widzi tych zmian, bo nie edytowałem pliku z poziomu VS! Jak sobie z tym poradziłem? Skopiowałem nową zawartość do schowka, w panelu &amp;quot;&lt;i&gt;Source control&lt;/i&gt;&amp;quot; odnalazłem ów plik, wymusiłem przywrócenie jego poprzedniego stanu przez kliknięcie &amp;quot;&lt;i&gt;Get latest version&lt;/i&gt;&amp;quot; i zaznaczenie jakichś 2 dziwnych checkboxów wymuszających nadpisanie tego co mam na dysku zawartością z repo, otworzyłem plik w VS, wkleiłem zawartość ze schowka i wreszcie poszło do repo. Damn, mamy XXI wiek, w ten sposób to Ulrich von Jungingen mógł aktualizować status bitwy pod Grunwaldem!!&lt;/p&gt;  &lt;p&gt;Wiele razy za to zdarzyło mi się zobaczyć w &amp;quot;&lt;i&gt;Pending changes&lt;/i&gt;&amp;quot; pliki, w których nic się nie zmieniło. I VS wie że nic się nie zmieniło, bo jak klikam &amp;quot;&lt;i&gt;compare with previous version&lt;/i&gt;&amp;quot; to mi pisze że &amp;quot;&lt;i&gt;files are identical&lt;/i&gt;&amp;quot;. A mimo to pokazuje je w &amp;quot;&lt;i&gt;pending changes&lt;/i&gt;&amp;quot;. Debil.&lt;/p&gt;  &lt;p&gt;System kontroli wersji powinien bardzo pomagać podczas przeglądania historii projektu w kontekście pojedynczych commitów. I tutaj również TFS zawodzi. Pierwsze co rzuciło mi się w oczy to brak &amp;quot;bocznego paska&amp;quot; w narzędziu do porównywania plików, pokazującego zmiany w skali całego pliku a nie tylko treści widocznej na ekranie. Wychodzi na to, że muszę przewinąć cały plik aby znaleźć wszystkie zmiany w nim popełnione - nie da się jednym rzutem oka ocenić gdzie zmiany zostały wprowadzone. W każdym innym znanym mi diff-tool taki &amp;quot;podsumowujący&amp;quot; pasek istnieje i nie wyobrażam sobie code review bez niego. Mało tego: to TFSowe narzędzie nie wykrywa zmian na poziomie znaków, a na poziomie całych LINII! Bardzo głupio to wygląda po przyzwyczajeniu się do &amp;quot;luksusów&amp;quot; oferowanych przez alternatywne rozwiązania. Dodatkowo ciężko jest obejść się bez myszki podczas przeglądania commitów - nawigacja klawiaturą nie jest zbyt wygodna ani wystarczająca. Na przykład w menu kontekstowym wyświetlanym dla zmodyfikowanych plików nie ma &amp;quot;akceleratorów&amp;quot;, czyli literowych skrótów pozwalających na wykonanie konkretnej komendy. Heh, mało tego - w okienku podglądu zadań można zobaczyć co prawda listę podpiętych pod dany task checkinów (w zakładce &amp;quot;&lt;i&gt;linked items&lt;/i&gt;&amp;quot;), ale... nie da się z tego poziomu sprawdzić ani kto jest autorem commita ani kiedy został on przysłany do systemu! Nie to że domyślnie nie wyświetla się taka informacja, ale z tego co wyczytałem: po prostu się NIE DA.&lt;/p&gt;  &lt;p&gt;A gdy chciałem cofnąć zawartość pewnego pliku o 2 commity to musiałem wykonać po kolei: &amp;quot;&lt;i&gt;get specific version&lt;/i&gt;&amp;quot; -&amp;gt; &lt;i&gt;copy&lt;/i&gt; -&amp;gt; &amp;quot;&lt;i&gt;get latest version&lt;/i&gt;&amp;quot; -&amp;gt; &lt;i&gt;paste&lt;/i&gt; -&amp;gt; &lt;i&gt;checkin&lt;/i&gt;. Mam szczerą nadzieję, że da się to zrobić jakoś mniej morońsko, feedback w komentarzach mile widziany.&lt;/p&gt;  &lt;p&gt;Heh, i jeszcze jedno: niejednokrotnie zbaraniałem, gdy TFS napisał że nie weźmie mojego checking ponieważ nie spełnia on &amp;quot;&lt;i&gt;checkin validation&lt;/i&gt;&amp;quot; - ale nie powiedział mi dlaczego tak jest. Jedyne co zobaczyłem to &amp;quot;&lt;i&gt;One or more checked work items failed the transition testing due to invalid field values.&amp;quot;&lt;/i&gt;&amp;#160; - i musiałem dopytywać w zespole o co chodzi, co może być nie tak.&lt;/p&gt;  &lt;h2&gt;Konkluzja&lt;/h2&gt;  &lt;p&gt;Wniosek jest bardzo prosty: dla osoby niekodującej, a tylko patrzącej na wykresy, TFS jest narzędziem naprawdę niezłym. Jednak wrzucanie w to bagno programistów tylko dlatego, żeby meneżer miał fajne statystyki, wydaje mi się nie do końca odpowiedzialne. Albo może nawet: niemoralne:). TFS narzuca na zespół tyle idiotycznych, bezsensownych ograniczeń, że aż wierzyć się nie chce! W końcu to już chyba trzecia wersja tego narzędzia, a ja nadal preferowałbym SVN (którego &lt;a href="http://www.maciejaniserowicz.com/post/2010/02/08/Dlaczego-juz-nie-lubie-SVN.aspx"&gt;też od dawna nienawidzę&lt;/a&gt;)! Straszne jest też to, jak wiele osób świadomie akceptuje te ograniczenia, bo &amp;quot;&lt;em&gt;w sumie to nic innego nie jest potrzebne&lt;/em&gt;&amp;quot;. Jednak każda z takich osób, z którymi miałem kontakt, nie pracowała nigdy z alternatywą.&lt;/p&gt;  &lt;p&gt;Są naprawdę o wiele, o wieeele (!!!) lepsze narzędzia do zarządzania kodem. I, uwaga!, da się je w miarę bezboleśnie z TFSem zintegrować. Ja już jestem w &amp;quot;tfs-free comfort zone&amp;quot; - moja cierpliwość wyczerpała się po 3 dniach, w czasie których i tak prawie wcale z kodem nie pracowałem. Co poniektórzy pewnie już się domyślają o co chodzi, ale o tym wkrótce. &lt;/p&gt;  &lt;p&gt;Ale póki co zawołanie do programistów zmuszanych do użerania się z TFSem: zaciskajcie, jak &lt;a href="http://pioniu.wrzuta.pl/audio/5nPTxAruLGw/telefon_do_polski"&gt;Czesiek&lt;/a&gt;, zęby, których nie macie i nie traćcie nadziei, zaraz za zakrętem czeka lepsze jutro;). Część problemów przedstawionych wyżej da się obejść - o tym także niedługo postaram się napisać.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=FO0Tyye5rCw:sLjHxkKVqDo:QDrqXnVDFOM"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=QDrqXnVDFOM" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=FO0Tyye5rCw:sLjHxkKVqDo:lt7SxnsiOIA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=lt7SxnsiOIA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=FO0Tyye5rCw:sLjHxkKVqDo:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=FO0Tyye5rCw:sLjHxkKVqDo:0VBWazUhMmc"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=0VBWazUhMmc" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=FO0Tyye5rCw:sLjHxkKVqDo:D7DqB2pKExk"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?i=FO0Tyye5rCw:sLjHxkKVqDo:D7DqB2pKExk" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/maciejaniserowicz/~4/FO0Tyye5rCw" height="1" width="1"/&gt;</description><pubDate>Mon, 16 Jan 2012 07:04:00 +0100</pubDate><comments>http://www.maciejaniserowicz.com/post/2012/01/16/TFS-po-pierwszym-tygodniu.aspx#comment</comments><dc:publisher xmlns:dc="http://purl.org/dc/elements/1.1/">procent</dc:publisher><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/pingback.axd</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/post.aspx?id=4ce203c0-8e35-4e61-a521-2e37cf03d571</pingback:target><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">39</slash:comments><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.maciejaniserowicz.com/trackback.axd?id=4ce203c0-8e35-4e61-a521-2e37cf03d571</trackback:ping><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/post/2012/01/16/TFS-po-pierwszym-tygodniu.aspx#comment</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/syndication.axd?post=4ce203c0-8e35-4e61-a521-2e37cf03d571</wfw:commentRss><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.maciejaniserowicz.com/post.aspx?id=4ce203c0-8e35-4e61-a521-2e37cf03d571</feedburner:origLink></item><item><guid isPermaLink="false">http://www.maciejaniserowicz.com/post.aspx?id=8ad750f4-315d-469d-a6e3-1decba85e698</guid><link>http://feedproxy.google.com/~r/maciejaniserowicz/~3/Sv3mXudcbZM/post.aspx</link><author>procent</author><category>pro</category><category>priv</category><title>Remanent 2011/2012</title><description>&lt;p&gt;Rozpoczyna się właśnie piąty rok życia niniejszego bloga i mojego online'owego, porządnego, kulturalnego i podobno bardzo sztucznego;) wcielenia. Przy tej okazji, jak zwykle (&lt;a href="http://www.maciejaniserowicz.com/post/2008/12/22/Koniec-roku-Co-bylo-co-bedzie.aspx"&gt;2009&lt;/a&gt;, &lt;a href="http://www.maciejaniserowicz.com/post/2010/01/04/Y-czyli-miedzy(k)rocze-2009-2010.aspx"&gt;2010&lt;/a&gt;, &lt;a href="http://www.maciejaniserowicz.com/post/2011/01/04/Po-kolejnym-roku-czyli-rachunek-sumienia-20102011.aspx"&gt;2011&lt;/a&gt;)&amp;#160; - pora na rzut jednym okiem w przeszłość, a drugim w przyszłość. Efekty takiego makabrycznego zeza co rok sobie czytam i jest to lektura zwykle dość miła, więc i tym razem nie będzie inaczej.&lt;/p&gt;  &lt;p&gt;GO!&lt;/p&gt;  &lt;h2&gt;2011&lt;/h2&gt;  &lt;p&gt;Prywatnie: zdecydowanie najważniejszym faktem minionego roku było &lt;a href="http://www.maciejaniserowicz.com/post/2011/09/26/i-ze-Cie-nie-opuszcze-az-do-shutdown-s.aspx"&gt;żonywzięcie&lt;/a&gt;, które to wydarzenie zostało zorganizowane dość spontanicznie, choć niespodziewanego głośnego i fajdającego ku temu powodu nie było. Ot, ułańska fantazja wzięła na chwilę górę nad kompletnym zdziadzieniem i codzienną rutyną. I to tyle.&lt;/p&gt;  &lt;p&gt;Blogowo: 87 postów, czyli chyba najmniej w mojej dotychczasowej działalności, chociaż też nieźle. Udało mi się sporo popisać m.in. o &lt;a href="http://www.maciejaniserowicz.com/?tag=/logowanie"&gt;logowaniu&lt;/a&gt; oraz &lt;a href="http://www.maciejaniserowicz.com/?tag=/unit+tests"&gt;testach jednostkowych&lt;/a&gt;. Część notek o testach dało się nawet zgrupować w całkiem składny &lt;a href="http://www.maciejaniserowicz.com/post/2011/08/08/UT-0-Zapowiedz-minicyklu-o-testach.aspx"&gt;cykl na ten temat&lt;/a&gt;. Wydaje mi się, że taki pomysł spotkał się z ciepłym przyjęciem z Waszej strony (tak?), co być może oznacza, że warto czasem zagłębić się w jakiś obszar programowania i poświęcić mu kilka/naście powiązanych ze sobą postów ryzykując potencjalne zanudzenie Czytelników nim niezainteresowanych (chociaż czy kogoś mogą zanudzić testy jednostkowe?;) ).&lt;/p&gt;  &lt;p&gt;Podczas patrzenia na wszelakie statystyki na twarzy kwitnie mi piękny uśmiech. Liczba subskrybentów RSS przekracza momentami wg feedburnera (w środku tygodnia) 650 osób! Stanowi to wzrost o ponad 50% w stosunku do roku poprzedniego. Blog zanotował też (wg google analytics) 106 tys. wizyt wygenerowanych przez 40 tys unikalnych użytkowników dających końcowy wynik ponad 231 tys odsłon. Porównując te dane ze statystykami innych polskich blogów o .NET mogę napisać jedno: wypas. Dzięki!&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.maciejaniserowicz.com/image.axd?picture=Windows-Live-Writer/Remanent-20112012/308A7C84/blog2011.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="blog2011" border="0" alt="blog2011" src="http://www.maciejaniserowicz.com/image.axd?picture=Windows-Live-Writer/Remanent-20112012/4EF4BD6D/blog2011_thumb.png" width="698" height="361" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Społecznościowo: oblałem egzamin na redaktora portalu &lt;a href="http://www.codeguru.pl/"&gt;CodeGuru.pl&lt;/a&gt;. Z wielką satysfakcją zaakceptowałem rok temu zaproszenie do grona Redaktorów, jednak po kilku miesiącach okazało się, że (głównie z powodu świadomego spychania obowiązków z tego wynikających na dalszy plan) najzwyczajniej w świecie się do tego nie nadaję. Kilka tygodni temu podjąłem więc męską decyzję i zrezygnowałem z tej funkcji.&lt;/p&gt;  &lt;p&gt;Oprócz tego mimo swojej niechęci do występowania w roli prelegenta dałem się dwukrotnie namówić do poopowiadania o testach jednostkowych - na Politechnice Białostockiej i na spotkaniu Białostockiej Grupy .NET. Nie było źle. Może jednak kiedyś coś ze mnie jeszcze będzie?&lt;/p&gt;  &lt;p&gt;No i MVP... Już po raz piąty z rzędu dostałem ten tytuł. Z jednej strony - oczywiście się cieszę. Może znowu dzięki temu uda się zorganizować jakąś fajną akcję, jak chociażby &lt;a href="http://www.maciejaniserowicz.com/page/Konkurs-daj-sie-poznac.aspx"&gt;konkurs Daj Się Poznać&lt;/a&gt;? Ale z drugiej - mam o programie MVP trochę mniej radosnych refleksji, którymi być może kiedyś się tutaj na blogu podzielę.&lt;/p&gt;  &lt;p&gt;Zawodowo: tu działo się najwięcej. Pierwszym wartym uwagi wydarzeniem była &lt;a href="http://www.maciejaniserowicz.com/post/2011/06/13/BenefitClub-c582aczy-stac582ych-klientow-i-dobre-firmy.aspx"&gt;premiera implementowanego przeze mnie portalu BenefitClub.pl&lt;/a&gt;. Później niestety życie rzuciło we mnie bardziej powodami do zasromania niż zadowolenia, skutkiem czego portfel schudł, z nerwów prawie pojawiły się wrzody, a z dotychczasowym podejściem do freelancingu &lt;a href="http://www.maciejaniserowicz.com/post/2011/10/12/Freelancing-i-okrutna-rzeczywistosc-Koniec-devDream.aspx"&gt;przyszło mi się pożegnać&lt;/a&gt;. Nie ma jednak tego złego co by na dobre nie wyszło - niedługo potem rozpocząłem bardzo udaną współpracę z &lt;a href="http://www.maciejaniserowicz.com/post/2011/10/21/Ja-i-Connected-Dots-c582aczymy-kropki-razem.aspx"&gt;Tomkiem Onyszko / Connected Dots&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Co z kolei prowadzi do...&lt;/p&gt;  &lt;h2&gt;2012&lt;/h2&gt;  &lt;p&gt;Bardzo wybiegających w przyszłość planów nie ma co snuć - w końcu nie od dziś wiadomo, że pod koniec 2012 czeka nas armagiedon. Co prawda podobno naukowcy go niedawno anulowali, ale kto tam wie...&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.maciejaniserowicz.com/post/2011/01/04/Po-kolejnym-roku-czyli-rachunek-sumienia-20102011.aspx"&gt;Rok temu&lt;/a&gt; postanowiłem, że w 2011 odpowiem sobie na pytanie: &amp;quot;&lt;i&gt;czy za 10 lat chcę nadal siedzieć sam w swoim pokoju i klepać w pojedynkę kod?&lt;/i&gt;&amp;quot;. Odpowiedziałem: nie! I na tym poprzestałem.&lt;/p&gt;  &lt;p&gt;Chwilę później jednak los przejął inicjatywę i dość niespodziewanie od tego tygodnia rozpoczynam... pracę! Obejmę stanowisko DevLeada w białostockim oddziale firmy &lt;a href="http://www.predica.pl/"&gt;Predica Business Solutions&lt;/a&gt;. Z jednej strony: ciężko jest mi pozbyć się obaw, ponieważ mój dotychczasowy tryb życia wydawał mi się po prostu idealny jak na obecną sytuację życiową. Ale z drugiej strony: nie mogę się doczekać. Czuję, że pracując w domu osiągnąłem już wszystko co było w ten sposób do osiągnięcia. Dalszy rozwój zawodowy nie obejdzie się bez kontaktu z ludźmi, bez wychodzenia z domu, bez liźnięcia &amp;quot;mikromenedżmentu&amp;quot;. Oczekiwania firmy względem mnie są spore, moje względem firmy - również. Wyzwanie zapowiada się więc bardzo ciekawie i mam wielką nadzieję, że jakoś się to wszystko pozytywnie ułoży, mimo mojego lekkiego &amp;quot;zdziczenia&amp;quot; przez ostatnie 3 lata pracy w domu. Kto wie, być może taki zwrot zaowocuje nowymi interesującymi tematami do poruszenia na blogu?&lt;/p&gt;  &lt;p&gt;Sytuacja ta tak zaprząta moją głowę, że nawet nie za bardzo potrafię wymyślić co jeszcze chciałbym w przyszłym roku zrobić. Chociaż... może wreszcie prawko na motor i jakąś fajną maszynę do kompletu?:)&lt;/p&gt;  &lt;hr /&gt;  &lt;p&gt;Jak zwykle staram się dość ostrożnie podchodzić do planów na nadchodzący rok, coby nie generować niepotrzebnych wyrzutów sumienia podczas lektury tego posta za 36x dni. Więc bez dalszego przedłużania życzę i sobie, i Wam w miarę bezbolesnego końca świata (bo awans z grupy na Euro2012 wydaje mi się nawet mniej prawdopodobny niż ten cały koniec, więc nawet go nie życzę). A jeśli okaże się, że to jednak ściema: to obyśmy wszyscy mogli za rok zerknąć wstecz na nadchodzące 12 miesięcy i powiedzieć: było git!&lt;/p&gt;  &lt;p&gt;Howgh!&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Sv3mXudcbZM:qBYiY-3O35Y:QDrqXnVDFOM"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=QDrqXnVDFOM" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Sv3mXudcbZM:qBYiY-3O35Y:lt7SxnsiOIA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=lt7SxnsiOIA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Sv3mXudcbZM:qBYiY-3O35Y:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Sv3mXudcbZM:qBYiY-3O35Y:0VBWazUhMmc"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=0VBWazUhMmc" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Sv3mXudcbZM:qBYiY-3O35Y:D7DqB2pKExk"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?i=Sv3mXudcbZM:qBYiY-3O35Y:D7DqB2pKExk" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/maciejaniserowicz/~4/Sv3mXudcbZM" height="1" width="1"/&gt;</description><pubDate>Mon, 02 Jan 2012 19:14:37 +0100</pubDate><comments>http://www.maciejaniserowicz.com/post/2012/01/02/Remanent-20112012.aspx#comment</comments><dc:publisher xmlns:dc="http://purl.org/dc/elements/1.1/">procent</dc:publisher><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/pingback.axd</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/post.aspx?id=8ad750f4-315d-469d-a6e3-1decba85e698</pingback:target><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">16</slash:comments><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.maciejaniserowicz.com/trackback.axd?id=8ad750f4-315d-469d-a6e3-1decba85e698</trackback:ping><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/post/2012/01/02/Remanent-20112012.aspx#comment</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/syndication.axd?post=8ad750f4-315d-469d-a6e3-1decba85e698</wfw:commentRss><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.maciejaniserowicz.com/post.aspx?id=8ad750f4-315d-469d-a6e3-1decba85e698</feedburner:origLink></item><item><guid isPermaLink="false">http://www.maciejaniserowicz.com/post.aspx?id=e08e3805-c5ee-4bb2-832a-448b7381c7fc</guid><link>http://feedproxy.google.com/~r/maciejaniserowicz/~3/3z8LWx8ZlO4/post.aspx</link><author>procent</author><category>pro</category><title>[UT-6.1] Jak nazywam testy</title><description>&lt;p&gt;&lt;em&gt;[ten post jest częścią mojego minicyklu o testach, pełna lista postów: &lt;/em&gt;&lt;a href="http://www.maciejaniserowicz.com/post/2011/08/08/UT-0-Zapowiedz-minicyklu-o-testach.aspx"&gt;tutaj&lt;/a&gt;&lt;em&gt;]&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;Przeglądając kod wielu projektów, zarówno komercyjnych jak i open source, można spotkać całą masę konwencji nazewniczych stosowanych do klas i metod testujących. Dzisiaj przedstawię kilka moich zasad w tej materii wraz z uzasadnieniem. Wychodzę z założenia, że bardziej niż konwencja, standard czy &amp;quot;przyjęta dobra praktyka&amp;quot; liczy się czytelność pisanego kodu i łatwość powrotu do niego nawet po kilku miesiącach od napisania. Dlatego też w swoich projektach nie mam zdefiniowanej jedynego słusznego schematu nazywania testów. Jednym może się to podobać, a innym nie... ale z doświadczenia wiem, że najzwyczajniej w świecie takie podejście się sprawdza.&lt;/p&gt;  &lt;h2&gt;CamelCase - nie; pokreślenia - tak&lt;/h2&gt;  &lt;p&gt;Konwencja (notacja?) CamelCase jest bardzo fajna i przydatna. Podczas &amp;quot;normalnego&amp;quot; programowania jak najbardziej ją stosuję i jestem z niej zadowolony. Szczególnie gdy da się taki kod przetrawić Resharperowi i skorzystać z jego dobrodziejstw do nawigacji. Testy jednak nie są &amp;quot;normalnym&amp;quot; kodem, bo... mają znacznie dłuższe nazwy. CamelCase sprawdza się wyśmienicie dla nazw składających się z dwóch, maksymalnie trzech słów. Dłuższe ciągi są już trudne do przetrawienia dla &amp;quot;serca i umysłu&amp;quot;. Którą z tych linijek łatwiej przyswoić?&lt;/p&gt;  &lt;p&gt;&lt;i&gt;throws_if_user_enters_invalid_credentials_twice&lt;/i&gt;&lt;/p&gt;  &lt;p&gt;&lt;i&gt;ThrowsIfUserEntersInvalidCredentialsTwice&lt;/i&gt;&lt;/p&gt;  &lt;p&gt;Ja bez wahania odpowiem, że zdecydowanie pierwszą. A o to przecież chodzi - żeby kod raz napisany dało się w miarę bezboleśnie wielokrotnie przeanalizować. Pierwotnie podchodziłem do tej koncepcji bardzo sceptycznie (a bo to przecież niezgodne z guidelines!), ale pragmatyzm wygrał, na szczęście, po raz kolejny.&lt;/p&gt;  &lt;h2&gt;Zdania twierdzące&lt;/h2&gt;  &lt;p&gt;Nazwa testu powinna w jednoznaczny sposób opisywać jaki dokładnie scenariusz jest testowany. I chodzi nie tylko o kontekst wykonania testu, czyli konfigurację środowiska, ale także o oczekiwany rezultat. Test o takiej nazwie:&lt;/p&gt;  &lt;p&gt;&lt;i&gt;what_if_user_enters_invalid_credentials_twice&lt;/i&gt;&lt;/p&gt;  &lt;p&gt;niewiele mi mówi. Muszę zajrzeć w jego kod, aby dowiedzieć się &amp;quot;&lt;i&gt;co się w takim razie ma wtedy stać?&lt;/i&gt;&amp;quot;. Zamiast tego o wiele bardziej wolałbym zobaczyć nazwę na przykład taką:&lt;/p&gt;  &lt;p&gt;&lt;i&gt;throws_error_if_user_enters_invalid_credentials_twice&lt;/i&gt;&lt;/p&gt;  &lt;p&gt;Albo:&lt;/p&gt;  &lt;p&gt;&lt;i&gt;&lt;i&gt;redirects_to_password_reminder_page_if_user_enters_invalid_credentials_twice&lt;/i&gt;&lt;/i&gt;&lt;/p&gt;  &lt;p&gt;Nie boję się tworzyć nazw długich. Kluczowe jest, aby spełniały swoje najważniejsze zadania: opisywały scenariusz testowany w danym teście. Niejednokrotnie zdarza mi się pisać nazwy zajmujące sporo, sporo więcej niż jeden ekran. Dzięki temu, gdy przychodzi co do czego (czyt.: dostaję raport z testami nieprzechodzącymi, bądź czytam swoje testy sprzed X czasu aby zobaczyć dlaczego coś zrobiłem w sposób taki a nie inny), posiadam komplet kompilowanych, zsynchronizowanych z kodem informacji o danym kawałku systemu.&lt;/p&gt;  &lt;p&gt;Przykład naprawdę długiej nazwy:&lt;/p&gt;  &lt;p&gt;&lt;i&gt;fetches_attributes_values_for_objects___prevents_loading_empty_objects_with_ID_value_only_caused_by_incorrectly_setting_selection_range&lt;/i&gt;&lt;/p&gt;  &lt;p&gt;I kolejny:&lt;/p&gt;  &lt;p&gt;&lt;i&gt;removes_duplicate_nodes_based_on_object_and_source_definition_before_persisting___fixed_problem_with_nodes_being_saved_more_than_once_after_refreshing_node_client_side&lt;/i&gt;&lt;/p&gt;  &lt;p&gt;Jak widać, w tych testach podałem nie tylko oczekiwane zachowanie, ale również jego UZASADNIENIE. Może to się wydawać nie do zaakceptowania, ale... naprawdę zdaje egzamin. Owszem, można zamiast tego dodać zwykły komentarz. Z komentarzami jest jednak pewien problem: dość szybko (na pewno szybciej niż nazwy metod) ulegają rozsynchronizowaniu w stosunku do komentowanego kodu. Dlatego też staram się ich unikać gdzie to tylko możliwe.&lt;/p&gt;  &lt;h2&gt;BDD-style?&lt;/h2&gt;  &lt;p&gt;Swego czasu eksperymentowałem z biblioteką &lt;a href="https://github.com/machine/machine.specifications"&gt;MSpec&lt;/a&gt;. Bardzo spodobał mi się promowany przez nią sposób organizacji testów w klasach. Od tamtej pory liczba klas testowanych przestała się w moich projektach równać liczbie klas testujących. Klas testujących mam o wieeele więcej. Dość często tworzę jedną klasę testującą per jeden scenariusz mogący wystąpić w systemie. Wróćmy do przykładu z dwukrotnym wpisaniem błędnych danych do logowania:&lt;/p&gt;  &lt;p&gt;&lt;i&gt;&lt;i&gt;redirects_to_password_reminder_page_if_user_enters_invalid_credentials_twice&lt;/i&gt;&lt;/i&gt;&lt;/p&gt;  &lt;p&gt;Standardowo taki test znalazłby się zapewne w klasie nazwanej &lt;i&gt;AccountControllerTests&lt;/i&gt;, czy coś w ten deseń (tak, wiem, że jest to sprzeczne z zasadami przedstawionymi w &lt;a href="http://www.maciejaniserowicz.com/post/2011/11/30/UT-4-Co-testowac-a-czego-nie-testowac.aspx"&gt;jednym z poprzednich postów&lt;/a&gt;, ale załóżmy że na dzisiejsze potrzeby napisaliśmy zły, fe, fat controller:)). Po przygodzie z MSpec zrealizowałbym to jednak (w xUnit) inaczej...&lt;/p&gt;  &lt;p&gt;Prawdopodobnie na początek stworzyłbym abstrakcyjną klasę &lt;i&gt;account_controller_test_base&lt;/i&gt;, która w konstruktorze tworzy kontroler i jego zależności, zapisując to wszystko jako pola &lt;i&gt;protected&lt;/i&gt;. Następnie dodałbym klasę dziedziczącą o nazwie &lt;i&gt;when_user_enters_invalid_credentials_twice&lt;/i&gt; - i w jej konstruktorze przygotował wszystko do poprawnej symulacji podania błędnych danych po dwakroć. W tej dopiero klasie znalazłyby się testy badające CO ma się stać w takiej sytuacji, więc właśnie tu pojawiłaby się metoda: &lt;i&gt;redirects_to_password_reminder_page&lt;/i&gt;. Plus może &lt;i&gt;sends_warning_email_to_administrator&lt;/i&gt;. Albo, jeśli miałbym bardziej przemyślaną architekturę: &lt;i&gt;publishes_event_about_possible_hacking_attempt&lt;/i&gt;.&lt;/p&gt;  &lt;p&gt;Dzięki takiej strukturze rozbijam swoje klasy z testami na mniejsze, bardziej skoncentrowane i zorganizowane byty. A raport z wykonania takich testów może być namiastką całkiem niezłego dokumentu prezentującego dokładne zachowanie systemu (a'la &lt;a href="http://en.wikipedia.org/wiki/Behavior_Driven_Development"&gt;BDD&lt;/a&gt;, choć z takimi stwierdzeniami wolę być ostrożny).&lt;/p&gt;  &lt;h2&gt;Numerki - precz!&lt;/h2&gt;  &lt;p&gt;Najmniej przydatne nazwy testów to wg mnie te wygenerowane wg schematu [jakaśnazwa][numer]. Czyli na przykład:&lt;/p&gt;  &lt;p&gt;&lt;i&gt;RegexParser_Parse_Test1&lt;/i&gt;&lt;/p&gt;  &lt;p&gt;&lt;i&gt;RegexParser_Parse_Test2&lt;/i&gt;&lt;/p&gt;  &lt;p&gt;&lt;i&gt;&lt;i&gt;RegexParser_Parse_Test3&lt;/i&gt;&lt;/i&gt;&lt;/p&gt;  &lt;p&gt;Co nam to mówi? NIC! Z nazwy klasy wnioskuję, że ma ona za zadanie parsować wyrażenia regularne, ale... jak to robi? Keine idea. Nie mogę zerknąć na listę testów i dowiedzieć się czegokolwiek. Muszę analizować całą klasę z testami. Albo, co gorsza - implementację klasy testowanej.&lt;/p&gt;  &lt;h2&gt;Polemika?&lt;/h2&gt;  &lt;p&gt;Podejrzewam, że powyższe postulaty mogą wywołać zdecydowany sprzeciw. Mam kilka przykładowych argumentów niezgadzających się z takim podejściem do nazywania testów... mam też na nie krótkie odpowiedzi.&lt;/p&gt;  &lt;p&gt;&amp;quot;&lt;i&gt;Takie nazwy są niezgodne z naszymi standardami. One są niezgodne z jakimikolwiek standardami!&lt;/i&gt;&amp;quot;&lt;/p&gt;  &lt;p&gt;Odpowiedź krótka: no to co? Standardy są po to, aby ułatwiać życie, a nie je utrudniać. Ogólne zasady, stworzone do zachowania spójności w &amp;quot;produkcyjnym&amp;quot; kodzie, nie mają tu moim zdaniem zastosowania. Główny powód jest bardzo prosty: testów nigdy nie wywołujemy w kodzie. Dla testów nie jest nam potrzebne intellisense - więc mogą być długie. Nie muszą zaczynać się z wielkiej litery - nie &amp;quot;zabrudzi&amp;quot; to nam API. Wiadomo, że zawsze metoda powinna w miarę dokładnie opisać zawarty w niej kod, ale dla testów tych informacji jest po prostu więcej niż w &amp;quot;zwykłym&amp;quot; kodzie.&lt;/p&gt;  &lt;p&gt;&amp;quot;&lt;i&gt;Po co szczegółowe nazwy - od tego są komentarze&lt;/i&gt;&amp;quot;&lt;/p&gt;  &lt;p&gt;Tak jak pisałem wyżej - komentarze mają irytującą tendencję do opisywania kodu który BYŁ pod nimi w momencie ich pisania, a nie tego który znajduje się tam teraz aktualnie. Są także niestety niezwykle podatne na &amp;quot;nieumyślne&amp;quot; mnożenie się metodą kopiuj/wklej wraz z komentowanym kodem, który zaraz po &amp;quot;wklej&amp;quot; jest poddawany obróbce.&lt;/p&gt;  &lt;p&gt;&amp;quot;&lt;i&gt;Jak test się zepsuje to i tak od razu trzeba pójść do kodu i go naprawić, a wtedy już będzie wiadomo co robi&lt;/i&gt;&amp;quot;&lt;/p&gt;  &lt;p&gt;Rola testów nie powinna ograniczać się do zapalania zielonych i czerwonych lampek. Testy mogą służyć jako doskonała dokumentacja testowanego kodu i odpowiednie ich nazwanie może w tym znacząco pomóc. Dobrze nazwane testy umożliwią zerknięcie na raport z ich wykonania i podstawie samego takiego raportu, bez wnikania w jakąkolwiek implementację, wywnioskowanie jakie jest zachowanie testowanej klasy czy nawet całego komponentu. Testów nie czyta się tylko wtedy, gdy &amp;quot;przestają działać&amp;quot;. Wręcz przeciwnie - one mogą być idealnym miejscem do rozpoczęcia zapoznawania się z kodem (czy to nowemu w projekcie programiście, czy też samemu autorowi za kilka miesięcy).&lt;/p&gt;  &lt;p&gt;&amp;quot;&lt;i&gt;Ale VS generuje mi takie nazwy testów!&lt;/i&gt;&amp;quot;&lt;/p&gt;  &lt;p&gt;To jest argument tak bezsensowny, że sam bym na niego nie wpadł... Nie wiedziałem nawet co i jak generuje VS, ale już wiem:). Na taki tekst odpowiedzieć można chyba tylko poradą zabarwioną nutką złośliwej ironii: to napisz sobie makro generujące losowy string i stosuj do wszystkich metod, nie tylko do testów, będzie szybciej... no i VS ci tak wygeneruje!&lt;/p&gt;  &lt;hr /&gt;&lt;p&gt;Jaką macie opinię na ten temat? Jak nazywacie swoje testy, co byście dodali do powyższej listy? Lub co byście z niej usunęli i dlaczego? Jak zwykle czekam na komentarze.&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=3z8LWx8ZlO4:OvY8xQDWVeI:QDrqXnVDFOM"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=QDrqXnVDFOM" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=3z8LWx8ZlO4:OvY8xQDWVeI:lt7SxnsiOIA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=lt7SxnsiOIA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=3z8LWx8ZlO4:OvY8xQDWVeI:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=3z8LWx8ZlO4:OvY8xQDWVeI:0VBWazUhMmc"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=0VBWazUhMmc" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=3z8LWx8ZlO4:OvY8xQDWVeI:D7DqB2pKExk"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?i=3z8LWx8ZlO4:OvY8xQDWVeI:D7DqB2pKExk" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/maciejaniserowicz/~4/3z8LWx8ZlO4" height="1" width="1"/&gt;</description><pubDate>Thu, 22 Dec 2011 07:20:00 +0100</pubDate><comments>http://www.maciejaniserowicz.com/post/2011/12/22/UT-61-Jak-nazywam-testy.aspx#comment</comments><dc:publisher xmlns:dc="http://purl.org/dc/elements/1.1/">procent</dc:publisher><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/pingback.axd</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/post.aspx?id=e08e3805-c5ee-4bb2-832a-448b7381c7fc</pingback:target><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">14</slash:comments><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.maciejaniserowicz.com/trackback.axd?id=e08e3805-c5ee-4bb2-832a-448b7381c7fc</trackback:ping><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/post/2011/12/22/UT-61-Jak-nazywam-testy.aspx#comment</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/syndication.axd?post=e08e3805-c5ee-4bb2-832a-448b7381c7fc</wfw:commentRss><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.maciejaniserowicz.com/post.aspx?id=e08e3805-c5ee-4bb2-832a-448b7381c7fc</feedburner:origLink></item><item><guid isPermaLink="false">http://www.maciejaniserowicz.com/post.aspx?id=d9a1b433-12f6-4865-9b1c-3c13d8bec185</guid><link>http://feedproxy.google.com/~r/maciejaniserowicz/~3/wlextw_LtxE/post.aspx</link><author>procent</author><category>pro</category><title>Testowanie setterów w fakeiteasy</title><description>&lt;p&gt;Na dzień dzisiejszy wybierając &amp;quot;mocking framework&amp;quot; stawiam właśnie na &lt;a href="http://code.google.com/p/fakeiteasy/"&gt;fakeiteasy&lt;/a&gt;. Ma ona jeden ciemny zakamar, w którym można nieźle pobłądzić... a jest to testowanie wywołania settera.&lt;/p&gt;  &lt;p&gt;Załóżmy, że mamy jakiś interfejs wymuszający na implementacjach posiadanie właściwości Age:&lt;/p&gt; &lt;!-- Code formatted with Procent.Samples: http://www.maciejaniserowicz.com/samples/CodeFormatter.aspx --&gt;  &lt;div class="csharp"&gt;   &lt;pre&gt;&lt;span class="csLineNumber"&gt;  1:&lt;/span&gt;  &lt;span class="csKeyword"&gt;public&lt;/span&gt; &lt;span class="csKeyword"&gt;interface&lt;/span&gt; IHaveAge
&lt;span class="csLineNumber"&gt;  2:&lt;/span&gt;  {
&lt;span class="csLineNumber"&gt;  3:&lt;/span&gt;      &lt;span class="csKeyword"&gt;int&lt;/span&gt; Age { get; set; }
&lt;span class="csLineNumber"&gt;  4:&lt;/span&gt;  }&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I test &amp;quot;jakiejś klasy&amp;quot; przetwarzającej implementacje tego interfejsu, mającej ustawić wartość wspomnianej właściwości:&lt;/p&gt;
&lt;!-- Code formatted with Procent.Samples: http://www.maciejaniserowicz.com/samples/CodeFormatter.aspx --&gt;

&lt;div class="csharp"&gt;
  &lt;pre&gt;&lt;span class="csLineNumber"&gt;  1:&lt;/span&gt;  [Fact]
&lt;span class="csLineNumber"&gt;  2:&lt;/span&gt;  &lt;span class="csKeyword"&gt;public&lt;/span&gt; &lt;span class="csKeyword"&gt;void&lt;/span&gt; sets_age_to_18_during_processing()
&lt;span class="csLineNumber"&gt;  3:&lt;/span&gt;  {
&lt;span class="csLineNumber"&gt;  4:&lt;/span&gt;      &lt;span class="csKeyword"&gt;var&lt;/span&gt; withAge = A.Fake&amp;lt;IHaveAge&amp;gt;();
&lt;span class="csLineNumber"&gt;  5:&lt;/span&gt;  
&lt;span class="csLineNumber"&gt;  6:&lt;/span&gt;      &lt;span class="csKeyword"&gt;new&lt;/span&gt; TestedClass().Process(withAge);
&lt;span class="csLineNumber"&gt;  7:&lt;/span&gt;  
&lt;span class="csLineNumber"&gt;  8:&lt;/span&gt;      A.CallTo(() =&amp;gt; withAge.Age = 18)
&lt;span class="csLineNumber"&gt;  9:&lt;/span&gt;          .MustHaveHappened();
&lt;span class="csLineNumber"&gt; 10:&lt;/span&gt;  }&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Wydaje się w porządku? Otóż nie jest. Kompilator zgłosi, że jesteśmy fe:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Error&amp;#160;&amp;#160;&amp;#160; 5&amp;#160;&amp;#160;&amp;#160; An expression tree may not contain an assignment operator&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sam powyższy scenariusz jest jeszcze w miarę prosty, bo przypisanie konkretnej wartości do settera możemy przetestować w &amp;quot;normalny&amp;quot; sposób - fakeiteasy zapamiętuje przypisanie i konfiguruje mocka tak aby zwracał aktualnie nadaną właściwości wartość:&lt;/p&gt;
&lt;!-- Code formatted with Procent.Samples: http://www.maciejaniserowicz.com/samples/CodeFormatter.aspx --&gt;

&lt;div class="csharp"&gt;
  &lt;pre&gt;&lt;span class="csLineNumber"&gt;  1:&lt;/span&gt;  [Fact]
&lt;span class="csLineNumber"&gt;  2:&lt;/span&gt;  &lt;span class="csKeyword"&gt;public&lt;/span&gt; &lt;span class="csKeyword"&gt;void&lt;/span&gt; sets_age_during_processing()
&lt;span class="csLineNumber"&gt;  3:&lt;/span&gt;  {
&lt;span class="csLineNumber"&gt;  4:&lt;/span&gt;      &lt;span class="csKeyword"&gt;var&lt;/span&gt; withAge = A.Fake&amp;lt;IHaveAge&amp;gt;();
&lt;span class="csLineNumber"&gt;  5:&lt;/span&gt;  
&lt;span class="csLineNumber"&gt;  6:&lt;/span&gt;      &lt;span class="csKeyword"&gt;new&lt;/span&gt; TestedClass().Adapt(withAge);
&lt;span class="csLineNumber"&gt;  7:&lt;/span&gt;  
&lt;span class="csLineNumber"&gt;  8:&lt;/span&gt;      Assert.Equal(18, withAge.Age);
&lt;span class="csLineNumber"&gt;  9:&lt;/span&gt;  }&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;Ale problem pojawia się, jeśli chcemy przetestować sam fakt wywołania settera, a nie jego aktualną wartość. Sytuacja taka może być na nas wprost wymuszona, na przykład jeśli mockujemy interfejs z zewnętrznej biblioteki i ma on właściwość write-only, bez gettera (rzadki przypadek, ale się zdarza). Jedynym chyba sposobem na napisanie takiego testu w fakeiteasy jest poniższy brzydal:&lt;/p&gt;
&lt;!-- Code formatted with Procent.Samples: http://www.maciejaniserowicz.com/samples/CodeFormatter.aspx --&gt;

&lt;div class="csharp"&gt;
  &lt;pre&gt;&lt;span class="csLineNumber"&gt;  1:&lt;/span&gt;  [Fact]
&lt;span class="csLineNumber"&gt;  2:&lt;/span&gt;  &lt;span class="csKeyword"&gt;public&lt;/span&gt; &lt;span class="csKeyword"&gt;void&lt;/span&gt; sets_age_during_processing()
&lt;span class="csLineNumber"&gt;  3:&lt;/span&gt;  {
&lt;span class="csLineNumber"&gt;  4:&lt;/span&gt;      &lt;span class="csKeyword"&gt;var&lt;/span&gt; withAge = A.Fake&amp;lt;IHaveAge&amp;gt;();
&lt;span class="csLineNumber"&gt;  5:&lt;/span&gt;  
&lt;span class="csLineNumber"&gt;  6:&lt;/span&gt;      &lt;span class="csKeyword"&gt;new&lt;/span&gt; TestedClass().Adapt(withAge);
&lt;span class="csLineNumber"&gt;  7:&lt;/span&gt;  
&lt;span class="csLineNumber"&gt;  8:&lt;/span&gt;      A.CallTo(withAge)
&lt;span class="csLineNumber"&gt;  9:&lt;/span&gt;          .Where(x =&amp;gt;
&lt;span class="csLineNumber"&gt; 10:&lt;/span&gt;                  x.Method.Name == &lt;span class="csString"&gt;&amp;quot;set_Age&amp;quot;&lt;/span&gt;
&lt;span class="csLineNumber"&gt; 11:&lt;/span&gt;                  &lt;span class="csComment"&gt;// if we want to test the value as well&lt;/span&gt;
&lt;span class="csLineNumber"&gt; 12:&lt;/span&gt;                  &lt;span class="csComment"&gt;// &amp;amp;&amp;amp; x.GetArgument&amp;lt;int&amp;gt;(0) == 18&lt;/span&gt;
&lt;span class="csLineNumber"&gt; 13:&lt;/span&gt;      ).MustHaveHappened();
&lt;span class="csLineNumber"&gt; 14:&lt;/span&gt;  }&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Okropne, ale... nie znalazłem lepszego sposobu (nie tylko ja, wiem że i &lt;a href="http://blog.gutek.pl/"&gt;Gutek&lt;/a&gt; trochę nad tym posiedział...).&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=wlextw_LtxE:kUgNKt8wRsc:QDrqXnVDFOM"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=QDrqXnVDFOM" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=wlextw_LtxE:kUgNKt8wRsc:lt7SxnsiOIA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=lt7SxnsiOIA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=wlextw_LtxE:kUgNKt8wRsc:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=wlextw_LtxE:kUgNKt8wRsc:0VBWazUhMmc"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=0VBWazUhMmc" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=wlextw_LtxE:kUgNKt8wRsc:D7DqB2pKExk"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?i=wlextw_LtxE:kUgNKt8wRsc:D7DqB2pKExk" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/maciejaniserowicz/~4/wlextw_LtxE" height="1" width="1"/&gt;</description><pubDate>Mon, 19 Dec 2011 07:11:00 +0100</pubDate><comments>http://www.maciejaniserowicz.com/post/2011/12/19/Testowanie-setterow-w-fakeiteasy.aspx#comment</comments><dc:publisher xmlns:dc="http://purl.org/dc/elements/1.1/">procent</dc:publisher><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/pingback.axd</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/post.aspx?id=d9a1b433-12f6-4865-9b1c-3c13d8bec185</pingback:target><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">3</slash:comments><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.maciejaniserowicz.com/trackback.axd?id=d9a1b433-12f6-4865-9b1c-3c13d8bec185</trackback:ping><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/post/2011/12/19/Testowanie-setterow-w-fakeiteasy.aspx#comment</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/syndication.axd?post=d9a1b433-12f6-4865-9b1c-3c13d8bec185</wfw:commentRss><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.maciejaniserowicz.com/post.aspx?id=d9a1b433-12f6-4865-9b1c-3c13d8bec185</feedburner:origLink></item><item><guid isPermaLink="false">http://www.maciejaniserowicz.com/post.aspx?id=b420baa6-eba8-4a97-8056-0ddcac74c953</guid><link>http://feedproxy.google.com/~r/maciejaniserowicz/~3/Cb7AkKMe0gc/post.aspx</link><author>procent</author><category>pro</category><title>Mockowanie IEnumerable/IEnumerator z fakeiteasy</title><description>&lt;p align="left"&gt;Niedawno po raz pierwszy w życiu musiałem mockować implementację interfejsu IEnumerable&amp;lt;T&amp;gt;. Chodziło o jakieś dziwne struktury używane wewnętrznie przez &lt;a href="http://www.microsoft.com/en-us/server-cloud/forefront/identity-manager.aspx"&gt;FIM&lt;/a&gt;. Problem polegał na tym, że obiekt mockowanego przeze mnie typu zwracał kolekcję innych obiektów. Ta kolekcja była właśnie IEnumerable&amp;lt;X&amp;gt;... ale nie mogłem stworzyć jej instancji, ponieważ wspomniana klasa XCollection była abstrakcyjna, a jej implementacja siedziała zaszyta gdzieś wewnątrz jakichś dllek. Jednocześnie chciałem przetestować swój kod, podając mu tak spreparowany mock, aby dało się jeździć po XCollection pętlą foreach oraz LINQ (które to stwierdzenia znaczą właściwie to samo).&lt;/p&gt;  &lt;p align="left"&gt;Okazało się, że trzeba było trochę pogłówkować. Poniżej kod realizujący to zadanie, od razu z testami sprawdzającymi poprawność stworzonego mocka:&lt;/p&gt; &lt;!-- Code formatted with Procent.Samples: http://www.maciejaniserowicz.com/samples/CodeFormatter.aspx --&gt;  &lt;div class="csharp"&gt;   &lt;pre&gt;&lt;span class="csLineNumber"&gt;  1:&lt;/span&gt;  &lt;span class="csKeyword"&gt;private&lt;/span&gt; IEnumerable&amp;lt;T&amp;gt; create_fake_enumerable&amp;lt;T&amp;gt;(&lt;span class="csKeyword"&gt;params&lt;/span&gt; T[] items)
&lt;span class="csLineNumber"&gt;  2:&lt;/span&gt;  {
&lt;span class="csLineNumber"&gt;  3:&lt;/span&gt;      &lt;span class="csKeyword"&gt;var&lt;/span&gt; enumerable = A.Fake&amp;lt;IEnumerable&amp;lt;T&amp;gt;&amp;gt;();
&lt;span class="csLineNumber"&gt;  4:&lt;/span&gt;      &lt;span class="csKeyword"&gt;var&lt;/span&gt; enumerator = A.Fake&amp;lt;IEnumerator&amp;lt;T&amp;gt;&amp;gt;();
&lt;span class="csLineNumber"&gt;  5:&lt;/span&gt;  
&lt;span class="csLineNumber"&gt;  6:&lt;/span&gt;      A.CallTo(() =&amp;gt; enumerable.GetEnumerator())
&lt;span class="csLineNumber"&gt;  7:&lt;/span&gt;          .Returns(enumerator);
&lt;span class="csLineNumber"&gt;  8:&lt;/span&gt;  
&lt;span class="csLineNumber"&gt;  9:&lt;/span&gt;      &lt;span class="csComment"&gt;// fake configuration is LIFO -&amp;gt;&lt;/span&gt;
&lt;span class="csLineNumber"&gt; 10:&lt;/span&gt;      &lt;span class="csComment"&gt;// -&amp;gt; define last action first&lt;/span&gt;
&lt;span class="csLineNumber"&gt; 11:&lt;/span&gt;      A.CallTo(() =&amp;gt; enumerator.MoveNext())
&lt;span class="csLineNumber"&gt; 12:&lt;/span&gt;          .Returns(&lt;span class="csKeyword"&gt;false&lt;/span&gt;)
&lt;span class="csLineNumber"&gt; 13:&lt;/span&gt;          .Once();
&lt;span class="csLineNumber"&gt; 14:&lt;/span&gt;  
&lt;span class="csLineNumber"&gt; 15:&lt;/span&gt;      &lt;span class="csComment"&gt;// define true for each element in enumerator&lt;/span&gt;
&lt;span class="csLineNumber"&gt; 16:&lt;/span&gt;      &lt;span class="csComment"&gt;// overriding earlier configuration&lt;/span&gt;
&lt;span class="csLineNumber"&gt; 17:&lt;/span&gt;      A.CallTo(() =&amp;gt; enumerator.MoveNext())
&lt;span class="csLineNumber"&gt; 18:&lt;/span&gt;          .Returns(&lt;span class="csKeyword"&gt;true&lt;/span&gt;)
&lt;span class="csLineNumber"&gt; 19:&lt;/span&gt;          .NumberOfTimes(items.Length);
&lt;span class="csLineNumber"&gt; 20:&lt;/span&gt;  
&lt;span class="csLineNumber"&gt; 21:&lt;/span&gt;      A.CallTo(() =&amp;gt; enumerator.Current)
&lt;span class="csLineNumber"&gt; 22:&lt;/span&gt;          .ReturnsNextFromSequence(items);
&lt;span class="csLineNumber"&gt; 23:&lt;/span&gt;  
&lt;span class="csLineNumber"&gt; 24:&lt;/span&gt;      &lt;span class="csKeyword"&gt;return&lt;/span&gt; enumerable;
&lt;span class="csLineNumber"&gt; 25:&lt;/span&gt;  }
&lt;span class="csLineNumber"&gt; 26:&lt;/span&gt;  
&lt;span class="csLineNumber"&gt; 27:&lt;/span&gt;  [Fact]
&lt;span class="csLineNumber"&gt; 28:&lt;/span&gt;  &lt;span class="csKeyword"&gt;public&lt;/span&gt; &lt;span class="csKeyword"&gt;void&lt;/span&gt; is_usable_in_linq()
&lt;span class="csLineNumber"&gt; 29:&lt;/span&gt;  {
&lt;span class="csLineNumber"&gt; 30:&lt;/span&gt;      &lt;span class="csKeyword"&gt;var&lt;/span&gt; enumerable = create_fake_enumerable(3, 6, 9);
&lt;span class="csLineNumber"&gt; 31:&lt;/span&gt;  
&lt;span class="csLineNumber"&gt; 32:&lt;/span&gt;      &lt;span class="csKeyword"&gt;var&lt;/span&gt; between4and9 = enumerable.Where(x =&amp;gt; x &amp;gt; 4 &amp;amp;&amp;amp; x &amp;lt; 9);
&lt;span class="csLineNumber"&gt; 33:&lt;/span&gt;  
&lt;span class="csLineNumber"&gt; 34:&lt;/span&gt;      Assert.Equal(1, between4and9.Count());
&lt;span class="csLineNumber"&gt; 35:&lt;/span&gt;  }
&lt;span class="csLineNumber"&gt; 36:&lt;/span&gt;  
&lt;span class="csLineNumber"&gt; 37:&lt;/span&gt;  [Fact]
&lt;span class="csLineNumber"&gt; 38:&lt;/span&gt;  &lt;span class="csKeyword"&gt;public&lt;/span&gt; &lt;span class="csKeyword"&gt;void&lt;/span&gt; is_usable_in_foreach()
&lt;span class="csLineNumber"&gt; 39:&lt;/span&gt;  {
&lt;span class="csLineNumber"&gt; 40:&lt;/span&gt;      &lt;span class="csKeyword"&gt;var&lt;/span&gt; enumerable = create_fake_enumerable(6, 6, 6, 6);
&lt;span class="csLineNumber"&gt; 41:&lt;/span&gt;  
&lt;span class="csLineNumber"&gt; 42:&lt;/span&gt;      &lt;span class="csKeyword"&gt;int&lt;/span&gt; counter = 0;
&lt;span class="csLineNumber"&gt; 43:&lt;/span&gt;  
&lt;span class="csLineNumber"&gt; 44:&lt;/span&gt;      &lt;span class="csKeyword"&gt;foreach&lt;/span&gt; (&lt;span class="csKeyword"&gt;var&lt;/span&gt; number &lt;span class="csKeyword"&gt;in&lt;/span&gt; enumerable)
&lt;span class="csLineNumber"&gt; 45:&lt;/span&gt;      {
&lt;span class="csLineNumber"&gt; 46:&lt;/span&gt;          Assert.Equal(6, number);
&lt;span class="csLineNumber"&gt; 47:&lt;/span&gt;          counter++;
&lt;span class="csLineNumber"&gt; 48:&lt;/span&gt;      }
&lt;span class="csLineNumber"&gt; 49:&lt;/span&gt;  
&lt;span class="csLineNumber"&gt; 50:&lt;/span&gt;      Assert.Equal(4, counter);
&lt;span class="csLineNumber"&gt; 51:&lt;/span&gt;  }&lt;/pre&gt;
&lt;/div&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Cb7AkKMe0gc:PQokTecSHio:QDrqXnVDFOM"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=QDrqXnVDFOM" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Cb7AkKMe0gc:PQokTecSHio:lt7SxnsiOIA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=lt7SxnsiOIA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Cb7AkKMe0gc:PQokTecSHio:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Cb7AkKMe0gc:PQokTecSHio:0VBWazUhMmc"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=0VBWazUhMmc" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=Cb7AkKMe0gc:PQokTecSHio:D7DqB2pKExk"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?i=Cb7AkKMe0gc:PQokTecSHio:D7DqB2pKExk" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/maciejaniserowicz/~4/Cb7AkKMe0gc" height="1" width="1"/&gt;</description><pubDate>Thu, 15 Dec 2011 07:38:48 +0100</pubDate><comments>http://www.maciejaniserowicz.com/post/2011/12/15/Mockowanie-IEnumerableIEnumerator-z-fakeiteasy.aspx#comment</comments><dc:publisher xmlns:dc="http://purl.org/dc/elements/1.1/">procent</dc:publisher><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/pingback.axd</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/post.aspx?id=b420baa6-eba8-4a97-8056-0ddcac74c953</pingback:target><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">8</slash:comments><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.maciejaniserowicz.com/trackback.axd?id=b420baa6-eba8-4a97-8056-0ddcac74c953</trackback:ping><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/post/2011/12/15/Mockowanie-IEnumerableIEnumerator-z-fakeiteasy.aspx#comment</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/syndication.axd?post=b420baa6-eba8-4a97-8056-0ddcac74c953</wfw:commentRss><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.maciejaniserowicz.com/post.aspx?id=b420baa6-eba8-4a97-8056-0ddcac74c953</feedburner:origLink></item><item><guid isPermaLink="false">http://www.maciejaniserowicz.com/post.aspx?id=88848107-2d47-4b95-a472-34ec772453a6</guid><link>http://feedproxy.google.com/~r/maciejaniserowicz/~3/7vu-zi6Tqg0/post.aspx</link><author>procent</author><category>pro</category><title>[UT-6] Jak testować?</title><description>&lt;p&gt;&lt;em&gt;[ten post jest częścią mojego minicyklu o testach, pełna lista postów: &lt;/em&gt;&lt;a href="http://www.maciejaniserowicz.com/post/2011/08/08/UT-0-Zapowiedz-minicyklu-o-testach.aspx"&gt;tutaj&lt;/a&gt;&lt;em&gt;]&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;Odpowiedź na pytanie postawione w tytule to temat nie na posta, ale na całą (może nawet niejedną) książkę. Poniżej postaram się nakreślić najważniejsze według mnie aspekty tworzenia testów... chociaż na pewno lista ta nie jest kompletna.&lt;/p&gt;  &lt;p&gt;Aha, no i nie jestem w stanie podać niezawodnej recepty na &amp;quot;dobry test&amp;quot;. Zgłębiam temat od dobrych kilku lat i sam ciągle się uczę, więc cudów nie ma - praktyka i identyfikowanie własnych pomyłek jest najlepszym nauczycielem:).&lt;/p&gt;  &lt;h2&gt;Testy to też kod!&lt;/h2&gt;  &lt;p&gt;Do poprawnej implementacji przydatnych testów konieczne jest uświadomienie sobie, że testy to kod tak samo ważny jak kod produkcyjny (czasami miewam nawet przebłyski przeświadczenia, że ważniejszy, ale nie mam jeszcze tej kwestii na tyle przemyślanej, żeby publicznie ją ujawniać i wdawać się w dyskusje na ten temat). Szczególnie na początku przygody z testami bardzo trudno jest zaakceptować taki tok myślenia. A bo to przecież jakaś osobna dllka, która sobie krąży obok &amp;quot;właściwego&amp;quot; rozwiązania i nigdy nie jest nikomu dostarczana, nie wykonuje się w środowisku produkcyjnym, nie zarabia na siebie... Błąd!&lt;/p&gt;  &lt;p&gt;Do testów powinno się podchodzić z taką samą, lub nawet większą, dbałością, jak to każdego innego elementu systemu. A już na pewno nie można ich lekceważyć. Koniec końców prawdopodobnie linii testujących będziemy mieli o wiele więcej niż linii testowanych... więc czy cokolwiek daje nam prawo dmuchania i chuchania na jeden kawał rozwiązania, podczas gdy drugi kawał to paskudne spaghetti tylko dlatego, że &amp;quot;&lt;em&gt;klient go nie uruchomi&lt;/em&gt;&amp;quot;? Nie!&lt;/p&gt;  &lt;p&gt;Nad strukturą testów także trzeba myśleć. Planować hierarchię klas, stosować przemyślaną architekturę, poświęcać CZAS na podnoszenie jakości efektu naszej pracy.&amp;#160; Bardzo, bardzo często widzę testy składające się w 70-80% z kodu wytworzonego metodą kopiuj/wklej. Czy ich autor postąpiłby tak samo z kodem &amp;quot;nie-testującym&amp;quot;? A gdzie tam, przecież tak nie można. Skąd więc samo-przyzwolenie na takie olewanie tutaj, tylko dlatego że nazwa pliku wynikowego z VS kończy się na *.Tests.dll?&lt;/p&gt;  &lt;p&gt;Jakiś kod przygotowujący środowisko się powtarza? To zamknijmy go w helperze / klasie bazowej / extension method / czymkolwiek.&lt;/p&gt;  &lt;p&gt;Wykorzystywany framework nie zawiera pożądanej funkcjonalności? To dlaczego go nie rozszerzyć, zamiast w wielu miejscach stosować te same kilka linijek realizujących jakiś scenariusz?&lt;/p&gt;  &lt;h2&gt;Maintenance / refactoring&lt;/h2&gt;  &lt;p&gt;O testy trzeba dbać. Regularnie. Niedopuszczalna jest sytuacja, w której raz napisany test żyje sobie własnym życiem od momentu zapalenia po raz pierwszy zielonej lampki w runnerze.&lt;/p&gt;  &lt;p&gt;W miarę uzupełniania testów nieustannie będziemy identyfikować scenariusze powtarzalne. Trzeba wtedy zachować się tak, jak byśmy zareagowali na podobne okoliczności projektem testowym - postarać się przeorganizować istniejące testy w taki sposób, aby proces dodawania kolejnych mógł skorzystać z już zawartej tam wiedzy i logiki. Ale też z głową!&lt;/p&gt;  &lt;p&gt;Na szczególną staranność i uwagę zasługuje proces definiowania kolejnych testów. Procedura ta musi być bardzo prosta, błyskawiczna i niewymagająca wielkiego wysiłku umysłowego. Jeżeli jednak natrafimy na trudność przy tym kroku - tworzenia nowego testu - to oznacza, że trzeba w tym miejscu pozostać chwilę dłużej. Niepewność &amp;quot;&lt;i&gt;gdzie mam ten nowy test utworzyć?&lt;/i&gt;&amp;quot; pokazuje, że w naszej hierarchii musimy zdefiniować nowe miejsce na dany typ testów wykonujących jakąś funkcjonalność. Nie można wtedy wsadzić go gdziekolwiek, bo po kilku dniach takiego postępowania - burdel murowany. Zawahanie &amp;quot;&lt;i&gt;ale jak spreparować zależności dla tego nowego testu?&lt;/i&gt;&amp;quot; wynika z nie do końca jeszcze gotowego procesu konfiguracji/mockowania tego konkretnego kawałka funkcjonalności. Co robimy? Bynajmniej nie piszemy masy kodu konfiguracyjnego dla tego jednego nowego scenariusza. Zamiast tego szukamy innych testów powiązanych z tą częścią programu i analizujemy, czy ten jeden nowy klocek nie pasuje przypadkiem do testów już utworzonych.&lt;/p&gt;  &lt;p&gt;I tak dalej....&lt;/p&gt;  &lt;p&gt;A to wszystko także po to, żeby lektura testów była prosta i nieskomplikowana. Testy powinno się czytać bez ciągłego zastanawiania &amp;quot;&lt;i&gt;a czemu tutaj tak a nie inaczej...?&lt;/i&gt;&amp;quot;. Wszelkie &amp;quot;niejasne&amp;quot; elementy tworzenia testów powinny być schowane za odpowiednimi metodami. Ja na przykład regularnie stosuję konwencję zamykania konfiguracji mocków za extension methods z opisowymi nazwami. Na przykład 4-5 linijkowe ustawienie, że metoda &amp;quot;&lt;i&gt;GetUserById(int id)&lt;/i&gt;&amp;quot; na interfejsie &amp;quot;&lt;i&gt;IUsersRepository&lt;/i&gt;&amp;quot; zwraca użytkownika z ustawionym takim Id wyrzuciłbym z samego testu do metody, której wywołanie w teście wyglądałoby tak: &lt;i&gt;var user = _usersRepository.configure_finding_user_by_id(3)&lt;/i&gt;. A jeśli jakieś repo miałoby wyrzucić błąd dla danego parametru: &lt;i&gt;_usersRepository.configure_error_for_finding_user(666)&lt;/i&gt;. Takie helpery mogą znacznie zwiększyć czytelność testów.&lt;/p&gt;  &lt;h2&gt;Testy testów?&lt;/h2&gt;  &lt;p&gt;Zdarza mi się pisać kod pomocniczy, dedykowany dla testów, który jest nietrywialny. Jak to robię? Stosując TDD:). Może to brzmi głupio i &amp;quot;&lt;i&gt;przesadnie&lt;/i&gt;&amp;quot;... ale nie ma w tym nic dziwnego. I, gdy już taka sytuacja występuje, faktycznie ułatwia pracę.&lt;/p&gt;  &lt;p&gt;Wtedy jednak bynajmniej nie tworzę projektu &lt;i&gt;xxx.Tests.Tests.dll&lt;/i&gt;. Zwykle w takim wypadku testy trzymam albo w tym samym pliku co testowany kod, albo w pliku obok - tak, aby jedno i drugie było zawsze blisko. Zawsze czysto. Zawsze pewnie.&lt;/p&gt;  &lt;h2&gt;Czy pisanie testów jest łatwe?&lt;/h2&gt;  &lt;p&gt;Nie. Pisanie testów nie jest łatwe. Wymaga dużo praktyki, wymaga popełnienia masy błędów, wymaga wiele czasu. Ale jest przyjemne. I na dłuższą metę - opłaca się. I piszę to nie z pozycji tego co rozumy pozjadał. Piszę to z pozycji tego, który widzi, że po długich latach czytania, pisania, próbowania, bicia głową w mur... chyba wreszcie zaczynam powoli łapać jak to należy robić. Mam przynajmniej taką nadzieję.&lt;/p&gt;  &lt;p&gt;A skoro łapię ja, to załapać może każdy. W końcu ja Trylogię i Krzyżaków czytałem po 7-8 razy, podobno temu że przez pierwsze 6 nie rozumiałem o co chodzi:).&lt;/p&gt;&lt;div class="feedflare"&gt;
&lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=7vu-zi6Tqg0:Iy3GJrjnojE:QDrqXnVDFOM"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=QDrqXnVDFOM" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=7vu-zi6Tqg0:Iy3GJrjnojE:lt7SxnsiOIA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=lt7SxnsiOIA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=7vu-zi6Tqg0:Iy3GJrjnojE:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=7vu-zi6Tqg0:Iy3GJrjnojE:0VBWazUhMmc"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?d=0VBWazUhMmc" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/maciejaniserowicz?a=7vu-zi6Tqg0:Iy3GJrjnojE:D7DqB2pKExk"&gt;&lt;img src="http://feeds.feedburner.com/~ff/maciejaniserowicz?i=7vu-zi6Tqg0:Iy3GJrjnojE:D7DqB2pKExk" border="0"&gt;&lt;/img&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/maciejaniserowicz/~4/7vu-zi6Tqg0" height="1" width="1"/&gt;</description><pubDate>Mon, 12 Dec 2011 07:07:00 +0100</pubDate><comments>http://www.maciejaniserowicz.com/post/2011/12/12/UT-6-Jak-testowac.aspx#comment</comments><dc:publisher xmlns:dc="http://purl.org/dc/elements/1.1/">procent</dc:publisher><pingback:server xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/pingback.axd</pingback:server><pingback:target xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/">http://www.maciejaniserowicz.com/post.aspx?id=88848107-2d47-4b95-a472-34ec772453a6</pingback:target><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">4</slash:comments><trackback:ping xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">http://www.maciejaniserowicz.com/trackback.axd?id=88848107-2d47-4b95-a472-34ec772453a6</trackback:ping><wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/post/2011/12/12/UT-6-Jak-testowac.aspx#comment</wfw:comment><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.maciejaniserowicz.com/syndication.axd?post=88848107-2d47-4b95-a472-34ec772453a6</wfw:commentRss><feedburner:origLink xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0">http://www.maciejaniserowicz.com/post.aspx?id=88848107-2d47-4b95-a472-34ec772453a6</feedburner:origLink></item></channel></rss>